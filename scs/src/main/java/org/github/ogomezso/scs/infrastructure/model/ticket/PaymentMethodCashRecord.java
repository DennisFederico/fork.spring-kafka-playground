/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.github.ogomezso.scs.infrastructure.model.ticket;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PaymentMethodCashRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5493746836120821436L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentMethodCashRecord\",\"namespace\":\"org.github.ogomezso.scs.infrastructure.model.ticket\",\"fields\":[{\"name\":\"cashPayment\",\"type\":{\"type\":\"record\",\"name\":\"CashPayment\",\"fields\":[{\"name\":\"paymentMethodId\",\"type\":\"string\"},{\"name\":\"paymentMethodAmount\",\"type\":\"string\"}]}},{\"name\":\"isPendingCash\",\"type\":\"boolean\"},{\"name\":\"isCancelled\",\"type\":\"boolean\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentMethodCashRecord> ENCODER =
      new BinaryMessageEncoder<PaymentMethodCashRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentMethodCashRecord> DECODER =
      new BinaryMessageDecoder<PaymentMethodCashRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentMethodCashRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentMethodCashRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentMethodCashRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PaymentMethodCashRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentMethodCashRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentMethodCashRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentMethodCashRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentMethodCashRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment cashPayment;
  private boolean isPendingCash;
  private boolean isCancelled;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentMethodCashRecord() {}

  /**
   * All-args constructor.
   * @param cashPayment The new value for cashPayment
   * @param isPendingCash The new value for isPendingCash
   * @param isCancelled The new value for isCancelled
   */
  public PaymentMethodCashRecord(org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment cashPayment, java.lang.Boolean isPendingCash, java.lang.Boolean isCancelled) {
    this.cashPayment = cashPayment;
    this.isPendingCash = isPendingCash;
    this.isCancelled = isCancelled;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cashPayment;
    case 1: return isPendingCash;
    case 2: return isCancelled;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cashPayment = (org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment)value$; break;
    case 1: isPendingCash = (java.lang.Boolean)value$; break;
    case 2: isCancelled = (java.lang.Boolean)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'cashPayment' field.
   * @return The value of the 'cashPayment' field.
   */
  public org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment getCashPayment() {
    return cashPayment;
  }


  /**
   * Sets the value of the 'cashPayment' field.
   * @param value the value to set.
   */
  public void setCashPayment(org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment value) {
    this.cashPayment = value;
  }

  /**
   * Gets the value of the 'isPendingCash' field.
   * @return The value of the 'isPendingCash' field.
   */
  public boolean getIsPendingCash() {
    return isPendingCash;
  }


  /**
   * Sets the value of the 'isPendingCash' field.
   * @param value the value to set.
   */
  public void setIsPendingCash(boolean value) {
    this.isPendingCash = value;
  }

  /**
   * Gets the value of the 'isCancelled' field.
   * @return The value of the 'isCancelled' field.
   */
  public boolean getIsCancelled() {
    return isCancelled;
  }


  /**
   * Sets the value of the 'isCancelled' field.
   * @param value the value to set.
   */
  public void setIsCancelled(boolean value) {
    this.isCancelled = value;
  }

  /**
   * Creates a new PaymentMethodCashRecord RecordBuilder.
   * @return A new PaymentMethodCashRecord RecordBuilder
   */
  public static org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder newBuilder() {
    return new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder();
  }

  /**
   * Creates a new PaymentMethodCashRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentMethodCashRecord RecordBuilder
   */
  public static org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder newBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder other) {
    if (other == null) {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder();
    } else {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder(other);
    }
  }

  /**
   * Creates a new PaymentMethodCashRecord RecordBuilder by copying an existing PaymentMethodCashRecord instance.
   * @param other The existing instance to copy.
   * @return A new PaymentMethodCashRecord RecordBuilder
   */
  public static org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder newBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord other) {
    if (other == null) {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder();
    } else {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentMethodCashRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentMethodCashRecord>
    implements org.apache.avro.data.RecordBuilder<PaymentMethodCashRecord> {

    private org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment cashPayment;
    private org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment.Builder cashPaymentBuilder;
    private boolean isPendingCash;
    private boolean isCancelled;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cashPayment)) {
        this.cashPayment = data().deepCopy(fields()[0].schema(), other.cashPayment);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasCashPaymentBuilder()) {
        this.cashPaymentBuilder = org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment.newBuilder(other.getCashPaymentBuilder());
      }
      if (isValidValue(fields()[1], other.isPendingCash)) {
        this.isPendingCash = data().deepCopy(fields()[1].schema(), other.isPendingCash);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.isCancelled)) {
        this.isCancelled = data().deepCopy(fields()[2].schema(), other.isCancelled);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentMethodCashRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.cashPayment)) {
        this.cashPayment = data().deepCopy(fields()[0].schema(), other.cashPayment);
        fieldSetFlags()[0] = true;
      }
      this.cashPaymentBuilder = null;
      if (isValidValue(fields()[1], other.isPendingCash)) {
        this.isPendingCash = data().deepCopy(fields()[1].schema(), other.isPendingCash);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.isCancelled)) {
        this.isCancelled = data().deepCopy(fields()[2].schema(), other.isCancelled);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'cashPayment' field.
      * @return The value.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment getCashPayment() {
      return cashPayment;
    }


    /**
      * Sets the value of the 'cashPayment' field.
      * @param value The value of 'cashPayment'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder setCashPayment(org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment value) {
      validate(fields()[0], value);
      this.cashPaymentBuilder = null;
      this.cashPayment = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cashPayment' field has been set.
      * @return True if the 'cashPayment' field has been set, false otherwise.
      */
    public boolean hasCashPayment() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'cashPayment' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment.Builder getCashPaymentBuilder() {
      if (cashPaymentBuilder == null) {
        if (hasCashPayment()) {
          setCashPaymentBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment.newBuilder(cashPayment));
        } else {
          setCashPaymentBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment.newBuilder());
        }
      }
      return cashPaymentBuilder;
    }

    /**
     * Sets the Builder instance for the 'cashPayment' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder setCashPaymentBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment.Builder value) {
      clearCashPayment();
      cashPaymentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'cashPayment' field has an active Builder instance
     * @return True if the 'cashPayment' field has an active Builder instance
     */
    public boolean hasCashPaymentBuilder() {
      return cashPaymentBuilder != null;
    }

    /**
      * Clears the value of the 'cashPayment' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder clearCashPayment() {
      cashPayment = null;
      cashPaymentBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'isPendingCash' field.
      * @return The value.
      */
    public boolean getIsPendingCash() {
      return isPendingCash;
    }


    /**
      * Sets the value of the 'isPendingCash' field.
      * @param value The value of 'isPendingCash'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder setIsPendingCash(boolean value) {
      validate(fields()[1], value);
      this.isPendingCash = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'isPendingCash' field has been set.
      * @return True if the 'isPendingCash' field has been set, false otherwise.
      */
    public boolean hasIsPendingCash() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'isPendingCash' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder clearIsPendingCash() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'isCancelled' field.
      * @return The value.
      */
    public boolean getIsCancelled() {
      return isCancelled;
    }


    /**
      * Sets the value of the 'isCancelled' field.
      * @param value The value of 'isCancelled'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder setIsCancelled(boolean value) {
      validate(fields()[2], value);
      this.isCancelled = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'isCancelled' field has been set.
      * @return True if the 'isCancelled' field has been set, false otherwise.
      */
    public boolean hasIsCancelled() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'isCancelled' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord.Builder clearIsCancelled() {
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentMethodCashRecord build() {
      try {
        PaymentMethodCashRecord record = new PaymentMethodCashRecord();
        if (cashPaymentBuilder != null) {
          try {
            record.cashPayment = this.cashPaymentBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("cashPayment"));
            throw e;
          }
        } else {
          record.cashPayment = fieldSetFlags()[0] ? this.cashPayment : (org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment) defaultValue(fields()[0]);
        }
        record.isPendingCash = fieldSetFlags()[1] ? this.isPendingCash : (java.lang.Boolean) defaultValue(fields()[1]);
        record.isCancelled = fieldSetFlags()[2] ? this.isCancelled : (java.lang.Boolean) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentMethodCashRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentMethodCashRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentMethodCashRecord>
    READER$ = (org.apache.avro.io.DatumReader<PaymentMethodCashRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.cashPayment.customEncode(out);

    out.writeBoolean(this.isPendingCash);

    out.writeBoolean(this.isCancelled);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.cashPayment == null) {
        this.cashPayment = new org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment();
      }
      this.cashPayment.customDecode(in);

      this.isPendingCash = in.readBoolean();

      this.isCancelled = in.readBoolean();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.cashPayment == null) {
            this.cashPayment = new org.github.ogomezso.scs.infrastructure.model.ticket.CashPayment();
          }
          this.cashPayment.customDecode(in);
          break;

        case 1:
          this.isPendingCash = in.readBoolean();
          break;

        case 2:
          this.isCancelled = in.readBoolean();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










