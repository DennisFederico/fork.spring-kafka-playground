/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.github.ogomezso.scs.infrastructure.model.ticket;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TicketMessage extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2743568990513192491L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TicketMessage\",\"namespace\":\"org.github.ogomezso.scs.infrastructure.model.ticket\",\"fields\":[{\"name\":\"companyId\",\"type\":\"string\"},{\"name\":\"identity\",\"type\":{\"type\":\"record\",\"name\":\"Identity\",\"fields\":[{\"name\":\"ticketDate\",\"type\":\"string\"},{\"name\":\"storePublicId\",\"type\":\"string\"},{\"name\":\"ticketNumber\",\"type\":\"string\"},{\"name\":\"posId\",\"type\":\"string\"}]}},{\"name\":\"header\",\"type\":{\"type\":\"record\",\"name\":\"Header\",\"fields\":[{\"name\":\"invoiceDuration\",\"type\":\"int\"},{\"name\":\"paymentDuration\",\"type\":\"int\"},{\"name\":\"employeeId\",\"type\":\"string\"},{\"name\":\"ticketHour\",\"type\":\"int\"},{\"name\":\"totalTicketAmount\",\"type\":\"string\"},{\"name\":\"ticketTypeId\",\"type\":\"string\"},{\"name\":\"OriginStoreTicket\",\"type\":{\"type\":\"record\",\"name\":\"OriginStoreTicket\",\"fields\":[{\"name\":\"ticketDate\",\"type\":\"string\"},{\"name\":\"storePublicId\",\"type\":\"string\"},{\"name\":\"ticketNumber\",\"type\":\"string\"},{\"name\":\"posId\",\"type\":\"string\"}]}},{\"name\":\"returnStoreTicket\",\"type\":{\"type\":\"record\",\"name\":\"ReturnStoreTicket\",\"fields\":[{\"name\":\"ticketDate\",\"type\":\"string\"},{\"name\":\"storePublicId\",\"type\":\"string\"},{\"name\":\"ticketNumber\",\"type\":\"string\"},{\"name\":\"posId\",\"type\":\"string\"}]}},{\"name\":\"deliveryNotePosId\",\"type\":\"string\"},{\"name\":\"deliveryNoteNumber\",\"type\":\"string\"},{\"name\":\"deliveryNoteDate\",\"type\":\"string\"},{\"name\":\"teleSalesOrderNumber\",\"type\":\"string\"},{\"name\":\"isParked\",\"type\":\"boolean\"},{\"name\":\"transactionTypeId\",\"type\":\"string\"},{\"name\":\"salesChannelId\",\"type\":\"string\"},{\"name\":\"storeTypeId\",\"type\":\"string\"},{\"name\":\"storeAddress\",\"type\":\"string\"},{\"name\":\"storeZipCode\",\"type\":\"string\"},{\"name\":\"storeCity\",\"type\":\"string\"},{\"name\":\"storePhone\",\"type\":\"string\"},{\"name\":\"barcode\",\"type\":\"string\"},{\"name\":\"certificationCode\",\"type\":\"string\"},{\"name\":\"isDigitalTicket\",\"type\":\"boolean\"},{\"name\":\"companyName\",\"type\":\"string\"},{\"name\":\"companyVatNumber\",\"type\":\"string\"},{\"name\":\"locale\",\"type\":\"string\"},{\"name\":\"encodedCustomerId\",\"type\":\"string\"}]}},{\"name\":\"invoice\",\"type\":{\"type\":\"record\",\"name\":\"Invoice\",\"fields\":[{\"name\":\"invoiceHandOverTypeId\",\"type\":\"string\"},{\"name\":\"vatNumber\",\"type\":\"string\"},{\"name\":\"branchOfficeId\",\"type\":\"string\"}]}},{\"name\":\"lines\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"LinesRecord\",\"fields\":[{\"name\":\"lineNumber\",\"type\":\"int\"},{\"name\":\"typeOfLine\",\"type\":\"string\"},{\"name\":\"gtin\",\"type\":\"string\"},{\"name\":\"productPublicId\",\"type\":\"string\"},{\"name\":\"productDenomination\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"pvp\",\"type\":\"string\"},{\"name\":\"sectionId\",\"type\":\"string\"},{\"name\":\"lineAmount\",\"type\":\"string\"},{\"name\":\"introductionMethod\",\"type\":\"string\"},{\"name\":\"auxiliarBarcode\",\"type\":\"string\"},{\"name\":\"unknownProductPublicId\",\"type\":\"string\"},{\"name\":\"grossPvp\",\"type\":\"string\"},{\"name\":\"transactionLineTypeId\",\"type\":\"string\"},{\"name\":\"isVatSplitted\",\"type\":\"boolean\"},{\"name\":\"saleTypeScale\",\"type\":\"string\"},{\"name\":\"ticketLineTax\",\"type\":{\"type\":\"record\",\"name\":\"TicketLineTax\",\"fields\":[{\"name\":\"taxClass\",\"type\":\"string\"},{\"name\":\"taxType\",\"type\":\"string\"},{\"name\":\"taxRate\",\"type\":\"string\"},{\"name\":\"taxBase\",\"type\":\"string\"},{\"name\":\"taxCharge\",\"type\":\"string\"},{\"name\":\"isTaxIncluded\",\"type\":\"boolean\"},{\"name\":\"vatLetter\",\"type\":\"string\"}]}},{\"name\":\"typeOfTicketLine\",\"type\":\"string\"}]}}},{\"name\":\"paymentMethodCash\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PaymentMethodCashRecord\",\"fields\":[{\"name\":\"cashPayment\",\"type\":{\"type\":\"record\",\"name\":\"CashPayment\",\"fields\":[{\"name\":\"paymentMethodId\",\"type\":\"string\"},{\"name\":\"paymentMethodAmount\",\"type\":\"string\"}]}},{\"name\":\"isPendingCash\",\"type\":\"boolean\"},{\"name\":\"isCancelled\",\"type\":\"boolean\"}]}}},{\"name\":\"paymentMethodCreditCard\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PaymentMethodCreditCardRecord\",\"fields\":[{\"name\":\"cardPayment\",\"type\":{\"type\":\"record\",\"name\":\"CardPayment\",\"fields\":[{\"name\":\"paymentMethodId\",\"type\":\"string\"},{\"name\":\"paymentMethodAmount\",\"type\":\"string\"}]}},{\"name\":\"creditCardId\",\"type\":\"string\"},{\"name\":\"expirationDate\",\"type\":\"string\"},{\"name\":\"introductionMethodCard\",\"type\":\"string\"},{\"name\":\"isSigned\",\"type\":\"boolean\"},{\"name\":\"token\",\"type\":\"string\"},{\"name\":\"pinpadId\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"string\"},{\"name\":\"operationNumber\",\"type\":\"string\"},{\"name\":\"isCancelled\",\"type\":\"boolean\"},{\"name\":\"receipt\",\"type\":\"string\"}]}}},{\"name\":\"paymentMethodbankTransfer\",\"type\":{\"type\":\"record\",\"name\":\"PaymentMethodbankTransfer\",\"fields\":[{\"name\":\"transferPayment\",\"type\":{\"type\":\"record\",\"name\":\"TransferPayment\",\"fields\":[{\"name\":\"paymentMethodId\",\"type\":\"string\"},{\"name\":\"paymentMethodAmount\",\"type\":\"string\"}]}},{\"name\":\"authorizedNif\",\"type\":\"string\"}]}},{\"name\":\"paymentMethodCoupon\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"PaymentMethodCouponRecord\",\"fields\":[{\"name\":\"couponPayment\",\"type\":{\"type\":\"record\",\"name\":\"CouponPayment\",\"fields\":[{\"name\":\"paymentMethodId\",\"type\":\"string\"},{\"name\":\"paymentMethodAmount\",\"type\":\"string\"}]}},{\"name\":\"couponBarcode\",\"type\":\"string\"},{\"name\":\"articleGtin\",\"type\":\"string\"},{\"name\":\"forced\",\"type\":\"int\"},{\"name\":\"couponIntroductionMethod\",\"type\":\"string\"},{\"name\":\"couponDescription\",\"type\":\"string\"},{\"name\":\"articleDescription\",\"type\":\"string\"}]}}},{\"name\":\"totalTax\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"TotalTaxRecord\",\"fields\":[{\"name\":\"taxClass\",\"type\":\"string\"},{\"name\":\"taxType\",\"type\":\"string\"},{\"name\":\"taxRate\",\"type\":\"string\"},{\"name\":\"taxBase\",\"type\":\"string\"},{\"name\":\"taxCharge\",\"type\":\"string\"},{\"name\":\"isTaxIncluded\",\"type\":\"boolean\"},{\"name\":\"vatLetter\",\"type\":\"string\"}]}}},{\"name\":\"scale\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ScaleRecord\",\"fields\":[{\"name\":\"lineNumberScale\",\"type\":\"string\"},{\"name\":\"scaleDate\",\"type\":\"string\"},{\"name\":\"scaleHour\",\"type\":\"string\"},{\"name\":\"scaleId\",\"type\":\"string\"},{\"name\":\"groupId\",\"type\":\"string\"},{\"name\":\"scaleTicketId\",\"type\":\"string\"},{\"name\":\"scaleOperatorId\",\"type\":\"string\"},{\"name\":\"scaleAmount\",\"type\":\"string\"},{\"name\":\"scaleTicketType\",\"type\":\"string\"}]}}},{\"name\":\"parkedLines\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"ParkedLinesRecord\",\"fields\":[{\"name\":\"employeeId\",\"type\":\"string\"},{\"name\":\"parkedTime\",\"type\":\"string\"},{\"name\":\"parkedType\",\"type\":\"string\"},{\"name\":\"lineNumber\",\"type\":\"int\"},{\"name\":\"amountLine\",\"type\":\"string\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TicketMessage> ENCODER =
      new BinaryMessageEncoder<TicketMessage>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TicketMessage> DECODER =
      new BinaryMessageDecoder<TicketMessage>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TicketMessage> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TicketMessage> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TicketMessage> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TicketMessage>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TicketMessage to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TicketMessage from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TicketMessage instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TicketMessage fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence companyId;
  private org.github.ogomezso.scs.infrastructure.model.ticket.Identity identity;
  private org.github.ogomezso.scs.infrastructure.model.ticket.Header header;
  private org.github.ogomezso.scs.infrastructure.model.ticket.Invoice invoice;
  private java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord> lines;
  private java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord> paymentMethodCash;
  private java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord> paymentMethodCreditCard;
  private org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer paymentMethodbankTransfer;
  private java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord> paymentMethodCoupon;
  private java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord> totalTax;
  private java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord> scale;
  private java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord> parkedLines;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TicketMessage() {}

  /**
   * All-args constructor.
   * @param companyId The new value for companyId
   * @param identity The new value for identity
   * @param header The new value for header
   * @param invoice The new value for invoice
   * @param lines The new value for lines
   * @param paymentMethodCash The new value for paymentMethodCash
   * @param paymentMethodCreditCard The new value for paymentMethodCreditCard
   * @param paymentMethodbankTransfer The new value for paymentMethodbankTransfer
   * @param paymentMethodCoupon The new value for paymentMethodCoupon
   * @param totalTax The new value for totalTax
   * @param scale The new value for scale
   * @param parkedLines The new value for parkedLines
   */
  public TicketMessage(java.lang.CharSequence companyId, org.github.ogomezso.scs.infrastructure.model.ticket.Identity identity, org.github.ogomezso.scs.infrastructure.model.ticket.Header header, org.github.ogomezso.scs.infrastructure.model.ticket.Invoice invoice, java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord> lines, java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord> paymentMethodCash, java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord> paymentMethodCreditCard, org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer paymentMethodbankTransfer, java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord> paymentMethodCoupon, java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord> totalTax, java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord> scale, java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord> parkedLines) {
    this.companyId = companyId;
    this.identity = identity;
    this.header = header;
    this.invoice = invoice;
    this.lines = lines;
    this.paymentMethodCash = paymentMethodCash;
    this.paymentMethodCreditCard = paymentMethodCreditCard;
    this.paymentMethodbankTransfer = paymentMethodbankTransfer;
    this.paymentMethodCoupon = paymentMethodCoupon;
    this.totalTax = totalTax;
    this.scale = scale;
    this.parkedLines = parkedLines;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return companyId;
    case 1: return identity;
    case 2: return header;
    case 3: return invoice;
    case 4: return lines;
    case 5: return paymentMethodCash;
    case 6: return paymentMethodCreditCard;
    case 7: return paymentMethodbankTransfer;
    case 8: return paymentMethodCoupon;
    case 9: return totalTax;
    case 10: return scale;
    case 11: return parkedLines;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: companyId = (java.lang.CharSequence)value$; break;
    case 1: identity = (org.github.ogomezso.scs.infrastructure.model.ticket.Identity)value$; break;
    case 2: header = (org.github.ogomezso.scs.infrastructure.model.ticket.Header)value$; break;
    case 3: invoice = (org.github.ogomezso.scs.infrastructure.model.ticket.Invoice)value$; break;
    case 4: lines = (java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord>)value$; break;
    case 5: paymentMethodCash = (java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord>)value$; break;
    case 6: paymentMethodCreditCard = (java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord>)value$; break;
    case 7: paymentMethodbankTransfer = (org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer)value$; break;
    case 8: paymentMethodCoupon = (java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord>)value$; break;
    case 9: totalTax = (java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord>)value$; break;
    case 10: scale = (java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord>)value$; break;
    case 11: parkedLines = (java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'companyId' field.
   * @return The value of the 'companyId' field.
   */
  public java.lang.CharSequence getCompanyId() {
    return companyId;
  }


  /**
   * Sets the value of the 'companyId' field.
   * @param value the value to set.
   */
  public void setCompanyId(java.lang.CharSequence value) {
    this.companyId = value;
  }

  /**
   * Gets the value of the 'identity' field.
   * @return The value of the 'identity' field.
   */
  public org.github.ogomezso.scs.infrastructure.model.ticket.Identity getIdentity() {
    return identity;
  }


  /**
   * Sets the value of the 'identity' field.
   * @param value the value to set.
   */
  public void setIdentity(org.github.ogomezso.scs.infrastructure.model.ticket.Identity value) {
    this.identity = value;
  }

  /**
   * Gets the value of the 'header' field.
   * @return The value of the 'header' field.
   */
  public org.github.ogomezso.scs.infrastructure.model.ticket.Header getHeader() {
    return header;
  }


  /**
   * Sets the value of the 'header' field.
   * @param value the value to set.
   */
  public void setHeader(org.github.ogomezso.scs.infrastructure.model.ticket.Header value) {
    this.header = value;
  }

  /**
   * Gets the value of the 'invoice' field.
   * @return The value of the 'invoice' field.
   */
  public org.github.ogomezso.scs.infrastructure.model.ticket.Invoice getInvoice() {
    return invoice;
  }


  /**
   * Sets the value of the 'invoice' field.
   * @param value the value to set.
   */
  public void setInvoice(org.github.ogomezso.scs.infrastructure.model.ticket.Invoice value) {
    this.invoice = value;
  }

  /**
   * Gets the value of the 'lines' field.
   * @return The value of the 'lines' field.
   */
  public java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord> getLines() {
    return lines;
  }


  /**
   * Sets the value of the 'lines' field.
   * @param value the value to set.
   */
  public void setLines(java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord> value) {
    this.lines = value;
  }

  /**
   * Gets the value of the 'paymentMethodCash' field.
   * @return The value of the 'paymentMethodCash' field.
   */
  public java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord> getPaymentMethodCash() {
    return paymentMethodCash;
  }


  /**
   * Sets the value of the 'paymentMethodCash' field.
   * @param value the value to set.
   */
  public void setPaymentMethodCash(java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord> value) {
    this.paymentMethodCash = value;
  }

  /**
   * Gets the value of the 'paymentMethodCreditCard' field.
   * @return The value of the 'paymentMethodCreditCard' field.
   */
  public java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord> getPaymentMethodCreditCard() {
    return paymentMethodCreditCard;
  }


  /**
   * Sets the value of the 'paymentMethodCreditCard' field.
   * @param value the value to set.
   */
  public void setPaymentMethodCreditCard(java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord> value) {
    this.paymentMethodCreditCard = value;
  }

  /**
   * Gets the value of the 'paymentMethodbankTransfer' field.
   * @return The value of the 'paymentMethodbankTransfer' field.
   */
  public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer getPaymentMethodbankTransfer() {
    return paymentMethodbankTransfer;
  }


  /**
   * Sets the value of the 'paymentMethodbankTransfer' field.
   * @param value the value to set.
   */
  public void setPaymentMethodbankTransfer(org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer value) {
    this.paymentMethodbankTransfer = value;
  }

  /**
   * Gets the value of the 'paymentMethodCoupon' field.
   * @return The value of the 'paymentMethodCoupon' field.
   */
  public java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord> getPaymentMethodCoupon() {
    return paymentMethodCoupon;
  }


  /**
   * Sets the value of the 'paymentMethodCoupon' field.
   * @param value the value to set.
   */
  public void setPaymentMethodCoupon(java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord> value) {
    this.paymentMethodCoupon = value;
  }

  /**
   * Gets the value of the 'totalTax' field.
   * @return The value of the 'totalTax' field.
   */
  public java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord> getTotalTax() {
    return totalTax;
  }


  /**
   * Sets the value of the 'totalTax' field.
   * @param value the value to set.
   */
  public void setTotalTax(java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord> value) {
    this.totalTax = value;
  }

  /**
   * Gets the value of the 'scale' field.
   * @return The value of the 'scale' field.
   */
  public java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord> getScale() {
    return scale;
  }


  /**
   * Sets the value of the 'scale' field.
   * @param value the value to set.
   */
  public void setScale(java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord> value) {
    this.scale = value;
  }

  /**
   * Gets the value of the 'parkedLines' field.
   * @return The value of the 'parkedLines' field.
   */
  public java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord> getParkedLines() {
    return parkedLines;
  }


  /**
   * Sets the value of the 'parkedLines' field.
   * @param value the value to set.
   */
  public void setParkedLines(java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord> value) {
    this.parkedLines = value;
  }

  /**
   * Creates a new TicketMessage RecordBuilder.
   * @return A new TicketMessage RecordBuilder
   */
  public static org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder newBuilder() {
    return new org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder();
  }

  /**
   * Creates a new TicketMessage RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TicketMessage RecordBuilder
   */
  public static org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder newBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder other) {
    if (other == null) {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder();
    } else {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder(other);
    }
  }

  /**
   * Creates a new TicketMessage RecordBuilder by copying an existing TicketMessage instance.
   * @param other The existing instance to copy.
   * @return A new TicketMessage RecordBuilder
   */
  public static org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder newBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage other) {
    if (other == null) {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder();
    } else {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder(other);
    }
  }

  /**
   * RecordBuilder for TicketMessage instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TicketMessage>
    implements org.apache.avro.data.RecordBuilder<TicketMessage> {

    private java.lang.CharSequence companyId;
    private org.github.ogomezso.scs.infrastructure.model.ticket.Identity identity;
    private org.github.ogomezso.scs.infrastructure.model.ticket.Identity.Builder identityBuilder;
    private org.github.ogomezso.scs.infrastructure.model.ticket.Header header;
    private org.github.ogomezso.scs.infrastructure.model.ticket.Header.Builder headerBuilder;
    private org.github.ogomezso.scs.infrastructure.model.ticket.Invoice invoice;
    private org.github.ogomezso.scs.infrastructure.model.ticket.Invoice.Builder invoiceBuilder;
    private java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord> lines;
    private java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord> paymentMethodCash;
    private java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord> paymentMethodCreditCard;
    private org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer paymentMethodbankTransfer;
    private org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer.Builder paymentMethodbankTransferBuilder;
    private java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord> paymentMethodCoupon;
    private java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord> totalTax;
    private java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord> scale;
    private java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord> parkedLines;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.companyId)) {
        this.companyId = data().deepCopy(fields()[0].schema(), other.companyId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.identity)) {
        this.identity = data().deepCopy(fields()[1].schema(), other.identity);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasIdentityBuilder()) {
        this.identityBuilder = org.github.ogomezso.scs.infrastructure.model.ticket.Identity.newBuilder(other.getIdentityBuilder());
      }
      if (isValidValue(fields()[2], other.header)) {
        this.header = data().deepCopy(fields()[2].schema(), other.header);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasHeaderBuilder()) {
        this.headerBuilder = org.github.ogomezso.scs.infrastructure.model.ticket.Header.newBuilder(other.getHeaderBuilder());
      }
      if (isValidValue(fields()[3], other.invoice)) {
        this.invoice = data().deepCopy(fields()[3].schema(), other.invoice);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (other.hasInvoiceBuilder()) {
        this.invoiceBuilder = org.github.ogomezso.scs.infrastructure.model.ticket.Invoice.newBuilder(other.getInvoiceBuilder());
      }
      if (isValidValue(fields()[4], other.lines)) {
        this.lines = data().deepCopy(fields()[4].schema(), other.lines);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.paymentMethodCash)) {
        this.paymentMethodCash = data().deepCopy(fields()[5].schema(), other.paymentMethodCash);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.paymentMethodCreditCard)) {
        this.paymentMethodCreditCard = data().deepCopy(fields()[6].schema(), other.paymentMethodCreditCard);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.paymentMethodbankTransfer)) {
        this.paymentMethodbankTransfer = data().deepCopy(fields()[7].schema(), other.paymentMethodbankTransfer);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (other.hasPaymentMethodbankTransferBuilder()) {
        this.paymentMethodbankTransferBuilder = org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer.newBuilder(other.getPaymentMethodbankTransferBuilder());
      }
      if (isValidValue(fields()[8], other.paymentMethodCoupon)) {
        this.paymentMethodCoupon = data().deepCopy(fields()[8].schema(), other.paymentMethodCoupon);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.totalTax)) {
        this.totalTax = data().deepCopy(fields()[9].schema(), other.totalTax);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.scale)) {
        this.scale = data().deepCopy(fields()[10].schema(), other.scale);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.parkedLines)) {
        this.parkedLines = data().deepCopy(fields()[11].schema(), other.parkedLines);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing TicketMessage instance
     * @param other The existing instance to copy.
     */
    private Builder(org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.companyId)) {
        this.companyId = data().deepCopy(fields()[0].schema(), other.companyId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.identity)) {
        this.identity = data().deepCopy(fields()[1].schema(), other.identity);
        fieldSetFlags()[1] = true;
      }
      this.identityBuilder = null;
      if (isValidValue(fields()[2], other.header)) {
        this.header = data().deepCopy(fields()[2].schema(), other.header);
        fieldSetFlags()[2] = true;
      }
      this.headerBuilder = null;
      if (isValidValue(fields()[3], other.invoice)) {
        this.invoice = data().deepCopy(fields()[3].schema(), other.invoice);
        fieldSetFlags()[3] = true;
      }
      this.invoiceBuilder = null;
      if (isValidValue(fields()[4], other.lines)) {
        this.lines = data().deepCopy(fields()[4].schema(), other.lines);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.paymentMethodCash)) {
        this.paymentMethodCash = data().deepCopy(fields()[5].schema(), other.paymentMethodCash);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.paymentMethodCreditCard)) {
        this.paymentMethodCreditCard = data().deepCopy(fields()[6].schema(), other.paymentMethodCreditCard);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.paymentMethodbankTransfer)) {
        this.paymentMethodbankTransfer = data().deepCopy(fields()[7].schema(), other.paymentMethodbankTransfer);
        fieldSetFlags()[7] = true;
      }
      this.paymentMethodbankTransferBuilder = null;
      if (isValidValue(fields()[8], other.paymentMethodCoupon)) {
        this.paymentMethodCoupon = data().deepCopy(fields()[8].schema(), other.paymentMethodCoupon);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.totalTax)) {
        this.totalTax = data().deepCopy(fields()[9].schema(), other.totalTax);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.scale)) {
        this.scale = data().deepCopy(fields()[10].schema(), other.scale);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.parkedLines)) {
        this.parkedLines = data().deepCopy(fields()[11].schema(), other.parkedLines);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'companyId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCompanyId() {
      return companyId;
    }


    /**
      * Sets the value of the 'companyId' field.
      * @param value The value of 'companyId'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setCompanyId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.companyId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'companyId' field has been set.
      * @return True if the 'companyId' field has been set, false otherwise.
      */
    public boolean hasCompanyId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'companyId' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder clearCompanyId() {
      companyId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'identity' field.
      * @return The value.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.Identity getIdentity() {
      return identity;
    }


    /**
      * Sets the value of the 'identity' field.
      * @param value The value of 'identity'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setIdentity(org.github.ogomezso.scs.infrastructure.model.ticket.Identity value) {
      validate(fields()[1], value);
      this.identityBuilder = null;
      this.identity = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'identity' field has been set.
      * @return True if the 'identity' field has been set, false otherwise.
      */
    public boolean hasIdentity() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'identity' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.github.ogomezso.scs.infrastructure.model.ticket.Identity.Builder getIdentityBuilder() {
      if (identityBuilder == null) {
        if (hasIdentity()) {
          setIdentityBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.Identity.newBuilder(identity));
        } else {
          setIdentityBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.Identity.newBuilder());
        }
      }
      return identityBuilder;
    }

    /**
     * Sets the Builder instance for the 'identity' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setIdentityBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.Identity.Builder value) {
      clearIdentity();
      identityBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'identity' field has an active Builder instance
     * @return True if the 'identity' field has an active Builder instance
     */
    public boolean hasIdentityBuilder() {
      return identityBuilder != null;
    }

    /**
      * Clears the value of the 'identity' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder clearIdentity() {
      identity = null;
      identityBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'header' field.
      * @return The value.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.Header getHeader() {
      return header;
    }


    /**
      * Sets the value of the 'header' field.
      * @param value The value of 'header'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setHeader(org.github.ogomezso.scs.infrastructure.model.ticket.Header value) {
      validate(fields()[2], value);
      this.headerBuilder = null;
      this.header = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'header' field has been set.
      * @return True if the 'header' field has been set, false otherwise.
      */
    public boolean hasHeader() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'header' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.github.ogomezso.scs.infrastructure.model.ticket.Header.Builder getHeaderBuilder() {
      if (headerBuilder == null) {
        if (hasHeader()) {
          setHeaderBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.Header.newBuilder(header));
        } else {
          setHeaderBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.Header.newBuilder());
        }
      }
      return headerBuilder;
    }

    /**
     * Sets the Builder instance for the 'header' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setHeaderBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.Header.Builder value) {
      clearHeader();
      headerBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'header' field has an active Builder instance
     * @return True if the 'header' field has an active Builder instance
     */
    public boolean hasHeaderBuilder() {
      return headerBuilder != null;
    }

    /**
      * Clears the value of the 'header' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder clearHeader() {
      header = null;
      headerBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'invoice' field.
      * @return The value.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.Invoice getInvoice() {
      return invoice;
    }


    /**
      * Sets the value of the 'invoice' field.
      * @param value The value of 'invoice'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setInvoice(org.github.ogomezso.scs.infrastructure.model.ticket.Invoice value) {
      validate(fields()[3], value);
      this.invoiceBuilder = null;
      this.invoice = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'invoice' field has been set.
      * @return True if the 'invoice' field has been set, false otherwise.
      */
    public boolean hasInvoice() {
      return fieldSetFlags()[3];
    }

    /**
     * Gets the Builder instance for the 'invoice' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.github.ogomezso.scs.infrastructure.model.ticket.Invoice.Builder getInvoiceBuilder() {
      if (invoiceBuilder == null) {
        if (hasInvoice()) {
          setInvoiceBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.Invoice.newBuilder(invoice));
        } else {
          setInvoiceBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.Invoice.newBuilder());
        }
      }
      return invoiceBuilder;
    }

    /**
     * Sets the Builder instance for the 'invoice' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setInvoiceBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.Invoice.Builder value) {
      clearInvoice();
      invoiceBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'invoice' field has an active Builder instance
     * @return True if the 'invoice' field has an active Builder instance
     */
    public boolean hasInvoiceBuilder() {
      return invoiceBuilder != null;
    }

    /**
      * Clears the value of the 'invoice' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder clearInvoice() {
      invoice = null;
      invoiceBuilder = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'lines' field.
      * @return The value.
      */
    public java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord> getLines() {
      return lines;
    }


    /**
      * Sets the value of the 'lines' field.
      * @param value The value of 'lines'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setLines(java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord> value) {
      validate(fields()[4], value);
      this.lines = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'lines' field has been set.
      * @return True if the 'lines' field has been set, false otherwise.
      */
    public boolean hasLines() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'lines' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder clearLines() {
      lines = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentMethodCash' field.
      * @return The value.
      */
    public java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord> getPaymentMethodCash() {
      return paymentMethodCash;
    }


    /**
      * Sets the value of the 'paymentMethodCash' field.
      * @param value The value of 'paymentMethodCash'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setPaymentMethodCash(java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord> value) {
      validate(fields()[5], value);
      this.paymentMethodCash = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentMethodCash' field has been set.
      * @return True if the 'paymentMethodCash' field has been set, false otherwise.
      */
    public boolean hasPaymentMethodCash() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'paymentMethodCash' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder clearPaymentMethodCash() {
      paymentMethodCash = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentMethodCreditCard' field.
      * @return The value.
      */
    public java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord> getPaymentMethodCreditCard() {
      return paymentMethodCreditCard;
    }


    /**
      * Sets the value of the 'paymentMethodCreditCard' field.
      * @param value The value of 'paymentMethodCreditCard'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setPaymentMethodCreditCard(java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord> value) {
      validate(fields()[6], value);
      this.paymentMethodCreditCard = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentMethodCreditCard' field has been set.
      * @return True if the 'paymentMethodCreditCard' field has been set, false otherwise.
      */
    public boolean hasPaymentMethodCreditCard() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'paymentMethodCreditCard' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder clearPaymentMethodCreditCard() {
      paymentMethodCreditCard = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentMethodbankTransfer' field.
      * @return The value.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer getPaymentMethodbankTransfer() {
      return paymentMethodbankTransfer;
    }


    /**
      * Sets the value of the 'paymentMethodbankTransfer' field.
      * @param value The value of 'paymentMethodbankTransfer'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setPaymentMethodbankTransfer(org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer value) {
      validate(fields()[7], value);
      this.paymentMethodbankTransferBuilder = null;
      this.paymentMethodbankTransfer = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentMethodbankTransfer' field has been set.
      * @return True if the 'paymentMethodbankTransfer' field has been set, false otherwise.
      */
    public boolean hasPaymentMethodbankTransfer() {
      return fieldSetFlags()[7];
    }

    /**
     * Gets the Builder instance for the 'paymentMethodbankTransfer' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer.Builder getPaymentMethodbankTransferBuilder() {
      if (paymentMethodbankTransferBuilder == null) {
        if (hasPaymentMethodbankTransfer()) {
          setPaymentMethodbankTransferBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer.newBuilder(paymentMethodbankTransfer));
        } else {
          setPaymentMethodbankTransferBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer.newBuilder());
        }
      }
      return paymentMethodbankTransferBuilder;
    }

    /**
     * Sets the Builder instance for the 'paymentMethodbankTransfer' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setPaymentMethodbankTransferBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer.Builder value) {
      clearPaymentMethodbankTransfer();
      paymentMethodbankTransferBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'paymentMethodbankTransfer' field has an active Builder instance
     * @return True if the 'paymentMethodbankTransfer' field has an active Builder instance
     */
    public boolean hasPaymentMethodbankTransferBuilder() {
      return paymentMethodbankTransferBuilder != null;
    }

    /**
      * Clears the value of the 'paymentMethodbankTransfer' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder clearPaymentMethodbankTransfer() {
      paymentMethodbankTransfer = null;
      paymentMethodbankTransferBuilder = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'paymentMethodCoupon' field.
      * @return The value.
      */
    public java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord> getPaymentMethodCoupon() {
      return paymentMethodCoupon;
    }


    /**
      * Sets the value of the 'paymentMethodCoupon' field.
      * @param value The value of 'paymentMethodCoupon'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setPaymentMethodCoupon(java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord> value) {
      validate(fields()[8], value);
      this.paymentMethodCoupon = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'paymentMethodCoupon' field has been set.
      * @return True if the 'paymentMethodCoupon' field has been set, false otherwise.
      */
    public boolean hasPaymentMethodCoupon() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'paymentMethodCoupon' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder clearPaymentMethodCoupon() {
      paymentMethodCoupon = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalTax' field.
      * @return The value.
      */
    public java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord> getTotalTax() {
      return totalTax;
    }


    /**
      * Sets the value of the 'totalTax' field.
      * @param value The value of 'totalTax'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setTotalTax(java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord> value) {
      validate(fields()[9], value);
      this.totalTax = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'totalTax' field has been set.
      * @return True if the 'totalTax' field has been set, false otherwise.
      */
    public boolean hasTotalTax() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'totalTax' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder clearTotalTax() {
      totalTax = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'scale' field.
      * @return The value.
      */
    public java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord> getScale() {
      return scale;
    }


    /**
      * Sets the value of the 'scale' field.
      * @param value The value of 'scale'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setScale(java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord> value) {
      validate(fields()[10], value);
      this.scale = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'scale' field has been set.
      * @return True if the 'scale' field has been set, false otherwise.
      */
    public boolean hasScale() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'scale' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder clearScale() {
      scale = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'parkedLines' field.
      * @return The value.
      */
    public java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord> getParkedLines() {
      return parkedLines;
    }


    /**
      * Sets the value of the 'parkedLines' field.
      * @param value The value of 'parkedLines'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder setParkedLines(java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord> value) {
      validate(fields()[11], value);
      this.parkedLines = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'parkedLines' field has been set.
      * @return True if the 'parkedLines' field has been set, false otherwise.
      */
    public boolean hasParkedLines() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'parkedLines' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketMessage.Builder clearParkedLines() {
      parkedLines = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TicketMessage build() {
      try {
        TicketMessage record = new TicketMessage();
        record.companyId = fieldSetFlags()[0] ? this.companyId : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (identityBuilder != null) {
          try {
            record.identity = this.identityBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("identity"));
            throw e;
          }
        } else {
          record.identity = fieldSetFlags()[1] ? this.identity : (org.github.ogomezso.scs.infrastructure.model.ticket.Identity) defaultValue(fields()[1]);
        }
        if (headerBuilder != null) {
          try {
            record.header = this.headerBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("header"));
            throw e;
          }
        } else {
          record.header = fieldSetFlags()[2] ? this.header : (org.github.ogomezso.scs.infrastructure.model.ticket.Header) defaultValue(fields()[2]);
        }
        if (invoiceBuilder != null) {
          try {
            record.invoice = this.invoiceBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("invoice"));
            throw e;
          }
        } else {
          record.invoice = fieldSetFlags()[3] ? this.invoice : (org.github.ogomezso.scs.infrastructure.model.ticket.Invoice) defaultValue(fields()[3]);
        }
        record.lines = fieldSetFlags()[4] ? this.lines : (java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord>) defaultValue(fields()[4]);
        record.paymentMethodCash = fieldSetFlags()[5] ? this.paymentMethodCash : (java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord>) defaultValue(fields()[5]);
        record.paymentMethodCreditCard = fieldSetFlags()[6] ? this.paymentMethodCreditCard : (java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord>) defaultValue(fields()[6]);
        if (paymentMethodbankTransferBuilder != null) {
          try {
            record.paymentMethodbankTransfer = this.paymentMethodbankTransferBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("paymentMethodbankTransfer"));
            throw e;
          }
        } else {
          record.paymentMethodbankTransfer = fieldSetFlags()[7] ? this.paymentMethodbankTransfer : (org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer) defaultValue(fields()[7]);
        }
        record.paymentMethodCoupon = fieldSetFlags()[8] ? this.paymentMethodCoupon : (java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord>) defaultValue(fields()[8]);
        record.totalTax = fieldSetFlags()[9] ? this.totalTax : (java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord>) defaultValue(fields()[9]);
        record.scale = fieldSetFlags()[10] ? this.scale : (java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord>) defaultValue(fields()[10]);
        record.parkedLines = fieldSetFlags()[11] ? this.parkedLines : (java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord>) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TicketMessage>
    WRITER$ = (org.apache.avro.io.DatumWriter<TicketMessage>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TicketMessage>
    READER$ = (org.apache.avro.io.DatumReader<TicketMessage>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.companyId);

    this.identity.customEncode(out);

    this.header.customEncode(out);

    this.invoice.customEncode(out);

    long size0 = this.lines.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord e0: this.lines) {
      actualSize0++;
      out.startItem();
      e0.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.paymentMethodCash.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord e1: this.paymentMethodCash) {
      actualSize1++;
      out.startItem();
      e1.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.paymentMethodCreditCard.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord e2: this.paymentMethodCreditCard) {
      actualSize2++;
      out.startItem();
      e2.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

    this.paymentMethodbankTransfer.customEncode(out);

    long size3 = this.paymentMethodCoupon.size();
    out.writeArrayStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord e3: this.paymentMethodCoupon) {
      actualSize3++;
      out.startItem();
      e3.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

    long size4 = this.totalTax.size();
    out.writeArrayStart();
    out.setItemCount(size4);
    long actualSize4 = 0;
    for (org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord e4: this.totalTax) {
      actualSize4++;
      out.startItem();
      e4.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize4 != size4)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");

    long size5 = this.scale.size();
    out.writeArrayStart();
    out.setItemCount(size5);
    long actualSize5 = 0;
    for (org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord e5: this.scale) {
      actualSize5++;
      out.startItem();
      e5.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize5 != size5)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size5 + ", but element count was " + actualSize5 + ".");

    long size6 = this.parkedLines.size();
    out.writeArrayStart();
    out.setItemCount(size6);
    long actualSize6 = 0;
    for (org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord e6: this.parkedLines) {
      actualSize6++;
      out.startItem();
      e6.customEncode(out);
    }
    out.writeArrayEnd();
    if (actualSize6 != size6)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size6 + ", but element count was " + actualSize6 + ".");

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.companyId = in.readString(this.companyId instanceof Utf8 ? (Utf8)this.companyId : null);

      if (this.identity == null) {
        this.identity = new org.github.ogomezso.scs.infrastructure.model.ticket.Identity();
      }
      this.identity.customDecode(in);

      if (this.header == null) {
        this.header = new org.github.ogomezso.scs.infrastructure.model.ticket.Header();
      }
      this.header.customDecode(in);

      if (this.invoice == null) {
        this.invoice = new org.github.ogomezso.scs.infrastructure.model.ticket.Invoice();
      }
      this.invoice.customDecode(in);

      long size0 = in.readArrayStart();
      java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord> a0 = this.lines;
      if (a0 == null) {
        a0 = new SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord>((int)size0, SCHEMA$.getField("lines").schema());
        this.lines = a0;
      } else a0.clear();
      SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord e0 = (ga0 != null ? ga0.peek() : null);
          if (e0 == null) {
            e0 = new org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord();
          }
          e0.customDecode(in);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord> a1 = this.paymentMethodCash;
      if (a1 == null) {
        a1 = new SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord>((int)size1, SCHEMA$.getField("paymentMethodCash").schema());
        this.paymentMethodCash = a1;
      } else a1.clear();
      SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord e1 = (ga1 != null ? ga1.peek() : null);
          if (e1 == null) {
            e1 = new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord();
          }
          e1.customDecode(in);
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord> a2 = this.paymentMethodCreditCard;
      if (a2 == null) {
        a2 = new SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord>((int)size2, SCHEMA$.getField("paymentMethodCreditCard").schema());
        this.paymentMethodCreditCard = a2;
      } else a2.clear();
      SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord e2 = (ga2 != null ? ga2.peek() : null);
          if (e2 == null) {
            e2 = new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord();
          }
          e2.customDecode(in);
          a2.add(e2);
        }
      }

      if (this.paymentMethodbankTransfer == null) {
        this.paymentMethodbankTransfer = new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer();
      }
      this.paymentMethodbankTransfer.customDecode(in);

      long size3 = in.readArrayStart();
      java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord> a3 = this.paymentMethodCoupon;
      if (a3 == null) {
        a3 = new SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord>((int)size3, SCHEMA$.getField("paymentMethodCoupon").schema());
        this.paymentMethodCoupon = a3;
      } else a3.clear();
      SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord>)a3 : null);
      for ( ; 0 < size3; size3 = in.arrayNext()) {
        for ( ; size3 != 0; size3--) {
          org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord e3 = (ga3 != null ? ga3.peek() : null);
          if (e3 == null) {
            e3 = new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord();
          }
          e3.customDecode(in);
          a3.add(e3);
        }
      }

      long size4 = in.readArrayStart();
      java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord> a4 = this.totalTax;
      if (a4 == null) {
        a4 = new SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord>((int)size4, SCHEMA$.getField("totalTax").schema());
        this.totalTax = a4;
      } else a4.clear();
      SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord>)a4 : null);
      for ( ; 0 < size4; size4 = in.arrayNext()) {
        for ( ; size4 != 0; size4--) {
          org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord e4 = (ga4 != null ? ga4.peek() : null);
          if (e4 == null) {
            e4 = new org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord();
          }
          e4.customDecode(in);
          a4.add(e4);
        }
      }

      long size5 = in.readArrayStart();
      java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord> a5 = this.scale;
      if (a5 == null) {
        a5 = new SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord>((int)size5, SCHEMA$.getField("scale").schema());
        this.scale = a5;
      } else a5.clear();
      SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord>)a5 : null);
      for ( ; 0 < size5; size5 = in.arrayNext()) {
        for ( ; size5 != 0; size5--) {
          org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord e5 = (ga5 != null ? ga5.peek() : null);
          if (e5 == null) {
            e5 = new org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord();
          }
          e5.customDecode(in);
          a5.add(e5);
        }
      }

      long size6 = in.readArrayStart();
      java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord> a6 = this.parkedLines;
      if (a6 == null) {
        a6 = new SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord>((int)size6, SCHEMA$.getField("parkedLines").schema());
        this.parkedLines = a6;
      } else a6.clear();
      SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord>)a6 : null);
      for ( ; 0 < size6; size6 = in.arrayNext()) {
        for ( ; size6 != 0; size6--) {
          org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord e6 = (ga6 != null ? ga6.peek() : null);
          if (e6 == null) {
            e6 = new org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord();
          }
          e6.customDecode(in);
          a6.add(e6);
        }
      }

    } else {
      for (int i = 0; i < 12; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.companyId = in.readString(this.companyId instanceof Utf8 ? (Utf8)this.companyId : null);
          break;

        case 1:
          if (this.identity == null) {
            this.identity = new org.github.ogomezso.scs.infrastructure.model.ticket.Identity();
          }
          this.identity.customDecode(in);
          break;

        case 2:
          if (this.header == null) {
            this.header = new org.github.ogomezso.scs.infrastructure.model.ticket.Header();
          }
          this.header.customDecode(in);
          break;

        case 3:
          if (this.invoice == null) {
            this.invoice = new org.github.ogomezso.scs.infrastructure.model.ticket.Invoice();
          }
          this.invoice.customDecode(in);
          break;

        case 4:
          long size0 = in.readArrayStart();
          java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord> a0 = this.lines;
          if (a0 == null) {
            a0 = new SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord>((int)size0, SCHEMA$.getField("lines").schema());
            this.lines = a0;
          } else a0.clear();
          SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord e0 = (ga0 != null ? ga0.peek() : null);
              if (e0 == null) {
                e0 = new org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord();
              }
              e0.customDecode(in);
              a0.add(e0);
            }
          }
          break;

        case 5:
          long size1 = in.readArrayStart();
          java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord> a1 = this.paymentMethodCash;
          if (a1 == null) {
            a1 = new SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord>((int)size1, SCHEMA$.getField("paymentMethodCash").schema());
            this.paymentMethodCash = a1;
          } else a1.clear();
          SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord e1 = (ga1 != null ? ga1.peek() : null);
              if (e1 == null) {
                e1 = new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCashRecord();
              }
              e1.customDecode(in);
              a1.add(e1);
            }
          }
          break;

        case 6:
          long size2 = in.readArrayStart();
          java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord> a2 = this.paymentMethodCreditCard;
          if (a2 == null) {
            a2 = new SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord>((int)size2, SCHEMA$.getField("paymentMethodCreditCard").schema());
            this.paymentMethodCreditCard = a2;
          } else a2.clear();
          SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord e2 = (ga2 != null ? ga2.peek() : null);
              if (e2 == null) {
                e2 = new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord();
              }
              e2.customDecode(in);
              a2.add(e2);
            }
          }
          break;

        case 7:
          if (this.paymentMethodbankTransfer == null) {
            this.paymentMethodbankTransfer = new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodbankTransfer();
          }
          this.paymentMethodbankTransfer.customDecode(in);
          break;

        case 8:
          long size3 = in.readArrayStart();
          java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord> a3 = this.paymentMethodCoupon;
          if (a3 == null) {
            a3 = new SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord>((int)size3, SCHEMA$.getField("paymentMethodCoupon").schema());
            this.paymentMethodCoupon = a3;
          } else a3.clear();
          SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord e3 = (ga3 != null ? ga3.peek() : null);
              if (e3 == null) {
                e3 = new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCouponRecord();
              }
              e3.customDecode(in);
              a3.add(e3);
            }
          }
          break;

        case 9:
          long size4 = in.readArrayStart();
          java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord> a4 = this.totalTax;
          if (a4 == null) {
            a4 = new SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord>((int)size4, SCHEMA$.getField("totalTax").schema());
            this.totalTax = a4;
          } else a4.clear();
          SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord>)a4 : null);
          for ( ; 0 < size4; size4 = in.arrayNext()) {
            for ( ; size4 != 0; size4--) {
              org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord e4 = (ga4 != null ? ga4.peek() : null);
              if (e4 == null) {
                e4 = new org.github.ogomezso.scs.infrastructure.model.ticket.TotalTaxRecord();
              }
              e4.customDecode(in);
              a4.add(e4);
            }
          }
          break;

        case 10:
          long size5 = in.readArrayStart();
          java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord> a5 = this.scale;
          if (a5 == null) {
            a5 = new SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord>((int)size5, SCHEMA$.getField("scale").schema());
            this.scale = a5;
          } else a5.clear();
          SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord>)a5 : null);
          for ( ; 0 < size5; size5 = in.arrayNext()) {
            for ( ; size5 != 0; size5--) {
              org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord e5 = (ga5 != null ? ga5.peek() : null);
              if (e5 == null) {
                e5 = new org.github.ogomezso.scs.infrastructure.model.ticket.ScaleRecord();
              }
              e5.customDecode(in);
              a5.add(e5);
            }
          }
          break;

        case 11:
          long size6 = in.readArrayStart();
          java.util.List<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord> a6 = this.parkedLines;
          if (a6 == null) {
            a6 = new SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord>((int)size6, SCHEMA$.getField("parkedLines").schema());
            this.parkedLines = a6;
          } else a6.clear();
          SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord>)a6 : null);
          for ( ; 0 < size6; size6 = in.arrayNext()) {
            for ( ; size6 != 0; size6--) {
              org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord e6 = (ga6 != null ? ga6.peek() : null);
              if (e6 == null) {
                e6 = new org.github.ogomezso.scs.infrastructure.model.ticket.ParkedLinesRecord();
              }
              e6.customDecode(in);
              a6.add(e6);
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










