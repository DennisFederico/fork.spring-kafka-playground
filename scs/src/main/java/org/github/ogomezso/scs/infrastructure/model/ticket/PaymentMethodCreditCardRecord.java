/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.github.ogomezso.scs.infrastructure.model.ticket;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PaymentMethodCreditCardRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4800113703134861140L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentMethodCreditCardRecord\",\"namespace\":\"org.github.ogomezso.scs.infrastructure.model.ticket\",\"fields\":[{\"name\":\"cardPayment\",\"type\":{\"type\":\"record\",\"name\":\"CardPayment\",\"fields\":[{\"name\":\"paymentMethodId\",\"type\":\"string\"},{\"name\":\"paymentMethodAmount\",\"type\":\"string\"}]}},{\"name\":\"creditCardId\",\"type\":\"string\"},{\"name\":\"expirationDate\",\"type\":\"string\"},{\"name\":\"introductionMethodCard\",\"type\":\"string\"},{\"name\":\"isSigned\",\"type\":\"boolean\"},{\"name\":\"token\",\"type\":\"string\"},{\"name\":\"pinpadId\",\"type\":\"string\"},{\"name\":\"period\",\"type\":\"string\"},{\"name\":\"operationNumber\",\"type\":\"string\"},{\"name\":\"isCancelled\",\"type\":\"boolean\"},{\"name\":\"receipt\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentMethodCreditCardRecord> ENCODER =
      new BinaryMessageEncoder<PaymentMethodCreditCardRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentMethodCreditCardRecord> DECODER =
      new BinaryMessageDecoder<PaymentMethodCreditCardRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentMethodCreditCardRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentMethodCreditCardRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentMethodCreditCardRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PaymentMethodCreditCardRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentMethodCreditCardRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentMethodCreditCardRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentMethodCreditCardRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentMethodCreditCardRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment cardPayment;
  private java.lang.CharSequence creditCardId;
  private java.lang.CharSequence expirationDate;
  private java.lang.CharSequence introductionMethodCard;
  private boolean isSigned;
  private java.lang.CharSequence token;
  private java.lang.CharSequence pinpadId;
  private java.lang.CharSequence period;
  private java.lang.CharSequence operationNumber;
  private boolean isCancelled;
  private java.lang.CharSequence receipt;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentMethodCreditCardRecord() {}

  /**
   * All-args constructor.
   * @param cardPayment The new value for cardPayment
   * @param creditCardId The new value for creditCardId
   * @param expirationDate The new value for expirationDate
   * @param introductionMethodCard The new value for introductionMethodCard
   * @param isSigned The new value for isSigned
   * @param token The new value for token
   * @param pinpadId The new value for pinpadId
   * @param period The new value for period
   * @param operationNumber The new value for operationNumber
   * @param isCancelled The new value for isCancelled
   * @param receipt The new value for receipt
   */
  public PaymentMethodCreditCardRecord(org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment cardPayment, java.lang.CharSequence creditCardId, java.lang.CharSequence expirationDate, java.lang.CharSequence introductionMethodCard, java.lang.Boolean isSigned, java.lang.CharSequence token, java.lang.CharSequence pinpadId, java.lang.CharSequence period, java.lang.CharSequence operationNumber, java.lang.Boolean isCancelled, java.lang.CharSequence receipt) {
    this.cardPayment = cardPayment;
    this.creditCardId = creditCardId;
    this.expirationDate = expirationDate;
    this.introductionMethodCard = introductionMethodCard;
    this.isSigned = isSigned;
    this.token = token;
    this.pinpadId = pinpadId;
    this.period = period;
    this.operationNumber = operationNumber;
    this.isCancelled = isCancelled;
    this.receipt = receipt;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return cardPayment;
    case 1: return creditCardId;
    case 2: return expirationDate;
    case 3: return introductionMethodCard;
    case 4: return isSigned;
    case 5: return token;
    case 6: return pinpadId;
    case 7: return period;
    case 8: return operationNumber;
    case 9: return isCancelled;
    case 10: return receipt;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: cardPayment = (org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment)value$; break;
    case 1: creditCardId = (java.lang.CharSequence)value$; break;
    case 2: expirationDate = (java.lang.CharSequence)value$; break;
    case 3: introductionMethodCard = (java.lang.CharSequence)value$; break;
    case 4: isSigned = (java.lang.Boolean)value$; break;
    case 5: token = (java.lang.CharSequence)value$; break;
    case 6: pinpadId = (java.lang.CharSequence)value$; break;
    case 7: period = (java.lang.CharSequence)value$; break;
    case 8: operationNumber = (java.lang.CharSequence)value$; break;
    case 9: isCancelled = (java.lang.Boolean)value$; break;
    case 10: receipt = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'cardPayment' field.
   * @return The value of the 'cardPayment' field.
   */
  public org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment getCardPayment() {
    return cardPayment;
  }


  /**
   * Sets the value of the 'cardPayment' field.
   * @param value the value to set.
   */
  public void setCardPayment(org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment value) {
    this.cardPayment = value;
  }

  /**
   * Gets the value of the 'creditCardId' field.
   * @return The value of the 'creditCardId' field.
   */
  public java.lang.CharSequence getCreditCardId() {
    return creditCardId;
  }


  /**
   * Sets the value of the 'creditCardId' field.
   * @param value the value to set.
   */
  public void setCreditCardId(java.lang.CharSequence value) {
    this.creditCardId = value;
  }

  /**
   * Gets the value of the 'expirationDate' field.
   * @return The value of the 'expirationDate' field.
   */
  public java.lang.CharSequence getExpirationDate() {
    return expirationDate;
  }


  /**
   * Sets the value of the 'expirationDate' field.
   * @param value the value to set.
   */
  public void setExpirationDate(java.lang.CharSequence value) {
    this.expirationDate = value;
  }

  /**
   * Gets the value of the 'introductionMethodCard' field.
   * @return The value of the 'introductionMethodCard' field.
   */
  public java.lang.CharSequence getIntroductionMethodCard() {
    return introductionMethodCard;
  }


  /**
   * Sets the value of the 'introductionMethodCard' field.
   * @param value the value to set.
   */
  public void setIntroductionMethodCard(java.lang.CharSequence value) {
    this.introductionMethodCard = value;
  }

  /**
   * Gets the value of the 'isSigned' field.
   * @return The value of the 'isSigned' field.
   */
  public boolean getIsSigned() {
    return isSigned;
  }


  /**
   * Sets the value of the 'isSigned' field.
   * @param value the value to set.
   */
  public void setIsSigned(boolean value) {
    this.isSigned = value;
  }

  /**
   * Gets the value of the 'token' field.
   * @return The value of the 'token' field.
   */
  public java.lang.CharSequence getToken() {
    return token;
  }


  /**
   * Sets the value of the 'token' field.
   * @param value the value to set.
   */
  public void setToken(java.lang.CharSequence value) {
    this.token = value;
  }

  /**
   * Gets the value of the 'pinpadId' field.
   * @return The value of the 'pinpadId' field.
   */
  public java.lang.CharSequence getPinpadId() {
    return pinpadId;
  }


  /**
   * Sets the value of the 'pinpadId' field.
   * @param value the value to set.
   */
  public void setPinpadId(java.lang.CharSequence value) {
    this.pinpadId = value;
  }

  /**
   * Gets the value of the 'period' field.
   * @return The value of the 'period' field.
   */
  public java.lang.CharSequence getPeriod() {
    return period;
  }


  /**
   * Sets the value of the 'period' field.
   * @param value the value to set.
   */
  public void setPeriod(java.lang.CharSequence value) {
    this.period = value;
  }

  /**
   * Gets the value of the 'operationNumber' field.
   * @return The value of the 'operationNumber' field.
   */
  public java.lang.CharSequence getOperationNumber() {
    return operationNumber;
  }


  /**
   * Sets the value of the 'operationNumber' field.
   * @param value the value to set.
   */
  public void setOperationNumber(java.lang.CharSequence value) {
    this.operationNumber = value;
  }

  /**
   * Gets the value of the 'isCancelled' field.
   * @return The value of the 'isCancelled' field.
   */
  public boolean getIsCancelled() {
    return isCancelled;
  }


  /**
   * Sets the value of the 'isCancelled' field.
   * @param value the value to set.
   */
  public void setIsCancelled(boolean value) {
    this.isCancelled = value;
  }

  /**
   * Gets the value of the 'receipt' field.
   * @return The value of the 'receipt' field.
   */
  public java.lang.CharSequence getReceipt() {
    return receipt;
  }


  /**
   * Sets the value of the 'receipt' field.
   * @param value the value to set.
   */
  public void setReceipt(java.lang.CharSequence value) {
    this.receipt = value;
  }

  /**
   * Creates a new PaymentMethodCreditCardRecord RecordBuilder.
   * @return A new PaymentMethodCreditCardRecord RecordBuilder
   */
  public static org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder newBuilder() {
    return new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder();
  }

  /**
   * Creates a new PaymentMethodCreditCardRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentMethodCreditCardRecord RecordBuilder
   */
  public static org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder newBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder other) {
    if (other == null) {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder();
    } else {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder(other);
    }
  }

  /**
   * Creates a new PaymentMethodCreditCardRecord RecordBuilder by copying an existing PaymentMethodCreditCardRecord instance.
   * @param other The existing instance to copy.
   * @return A new PaymentMethodCreditCardRecord RecordBuilder
   */
  public static org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder newBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord other) {
    if (other == null) {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder();
    } else {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentMethodCreditCardRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentMethodCreditCardRecord>
    implements org.apache.avro.data.RecordBuilder<PaymentMethodCreditCardRecord> {

    private org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment cardPayment;
    private org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment.Builder cardPaymentBuilder;
    private java.lang.CharSequence creditCardId;
    private java.lang.CharSequence expirationDate;
    private java.lang.CharSequence introductionMethodCard;
    private boolean isSigned;
    private java.lang.CharSequence token;
    private java.lang.CharSequence pinpadId;
    private java.lang.CharSequence period;
    private java.lang.CharSequence operationNumber;
    private boolean isCancelled;
    private java.lang.CharSequence receipt;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.cardPayment)) {
        this.cardPayment = data().deepCopy(fields()[0].schema(), other.cardPayment);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasCardPaymentBuilder()) {
        this.cardPaymentBuilder = org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment.newBuilder(other.getCardPaymentBuilder());
      }
      if (isValidValue(fields()[1], other.creditCardId)) {
        this.creditCardId = data().deepCopy(fields()[1].schema(), other.creditCardId);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[2].schema(), other.expirationDate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.introductionMethodCard)) {
        this.introductionMethodCard = data().deepCopy(fields()[3].schema(), other.introductionMethodCard);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.isSigned)) {
        this.isSigned = data().deepCopy(fields()[4].schema(), other.isSigned);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.token)) {
        this.token = data().deepCopy(fields()[5].schema(), other.token);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.pinpadId)) {
        this.pinpadId = data().deepCopy(fields()[6].schema(), other.pinpadId);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.period)) {
        this.period = data().deepCopy(fields()[7].schema(), other.period);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.operationNumber)) {
        this.operationNumber = data().deepCopy(fields()[8].schema(), other.operationNumber);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.isCancelled)) {
        this.isCancelled = data().deepCopy(fields()[9].schema(), other.isCancelled);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.receipt)) {
        this.receipt = data().deepCopy(fields()[10].schema(), other.receipt);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentMethodCreditCardRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.cardPayment)) {
        this.cardPayment = data().deepCopy(fields()[0].schema(), other.cardPayment);
        fieldSetFlags()[0] = true;
      }
      this.cardPaymentBuilder = null;
      if (isValidValue(fields()[1], other.creditCardId)) {
        this.creditCardId = data().deepCopy(fields()[1].schema(), other.creditCardId);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.expirationDate)) {
        this.expirationDate = data().deepCopy(fields()[2].schema(), other.expirationDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.introductionMethodCard)) {
        this.introductionMethodCard = data().deepCopy(fields()[3].schema(), other.introductionMethodCard);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.isSigned)) {
        this.isSigned = data().deepCopy(fields()[4].schema(), other.isSigned);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.token)) {
        this.token = data().deepCopy(fields()[5].schema(), other.token);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.pinpadId)) {
        this.pinpadId = data().deepCopy(fields()[6].schema(), other.pinpadId);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.period)) {
        this.period = data().deepCopy(fields()[7].schema(), other.period);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.operationNumber)) {
        this.operationNumber = data().deepCopy(fields()[8].schema(), other.operationNumber);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.isCancelled)) {
        this.isCancelled = data().deepCopy(fields()[9].schema(), other.isCancelled);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.receipt)) {
        this.receipt = data().deepCopy(fields()[10].schema(), other.receipt);
        fieldSetFlags()[10] = true;
      }
    }

    /**
      * Gets the value of the 'cardPayment' field.
      * @return The value.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment getCardPayment() {
      return cardPayment;
    }


    /**
      * Sets the value of the 'cardPayment' field.
      * @param value The value of 'cardPayment'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder setCardPayment(org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment value) {
      validate(fields()[0], value);
      this.cardPaymentBuilder = null;
      this.cardPayment = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'cardPayment' field has been set.
      * @return True if the 'cardPayment' field has been set, false otherwise.
      */
    public boolean hasCardPayment() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'cardPayment' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment.Builder getCardPaymentBuilder() {
      if (cardPaymentBuilder == null) {
        if (hasCardPayment()) {
          setCardPaymentBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment.newBuilder(cardPayment));
        } else {
          setCardPaymentBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment.newBuilder());
        }
      }
      return cardPaymentBuilder;
    }

    /**
     * Sets the Builder instance for the 'cardPayment' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder setCardPaymentBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment.Builder value) {
      clearCardPayment();
      cardPaymentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'cardPayment' field has an active Builder instance
     * @return True if the 'cardPayment' field has an active Builder instance
     */
    public boolean hasCardPaymentBuilder() {
      return cardPaymentBuilder != null;
    }

    /**
      * Clears the value of the 'cardPayment' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder clearCardPayment() {
      cardPayment = null;
      cardPaymentBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'creditCardId' field.
      * @return The value.
      */
    public java.lang.CharSequence getCreditCardId() {
      return creditCardId;
    }


    /**
      * Sets the value of the 'creditCardId' field.
      * @param value The value of 'creditCardId'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder setCreditCardId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.creditCardId = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'creditCardId' field has been set.
      * @return True if the 'creditCardId' field has been set, false otherwise.
      */
    public boolean hasCreditCardId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'creditCardId' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder clearCreditCardId() {
      creditCardId = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'expirationDate' field.
      * @return The value.
      */
    public java.lang.CharSequence getExpirationDate() {
      return expirationDate;
    }


    /**
      * Sets the value of the 'expirationDate' field.
      * @param value The value of 'expirationDate'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder setExpirationDate(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.expirationDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'expirationDate' field has been set.
      * @return True if the 'expirationDate' field has been set, false otherwise.
      */
    public boolean hasExpirationDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'expirationDate' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder clearExpirationDate() {
      expirationDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'introductionMethodCard' field.
      * @return The value.
      */
    public java.lang.CharSequence getIntroductionMethodCard() {
      return introductionMethodCard;
    }


    /**
      * Sets the value of the 'introductionMethodCard' field.
      * @param value The value of 'introductionMethodCard'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder setIntroductionMethodCard(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.introductionMethodCard = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'introductionMethodCard' field has been set.
      * @return True if the 'introductionMethodCard' field has been set, false otherwise.
      */
    public boolean hasIntroductionMethodCard() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'introductionMethodCard' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder clearIntroductionMethodCard() {
      introductionMethodCard = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'isSigned' field.
      * @return The value.
      */
    public boolean getIsSigned() {
      return isSigned;
    }


    /**
      * Sets the value of the 'isSigned' field.
      * @param value The value of 'isSigned'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder setIsSigned(boolean value) {
      validate(fields()[4], value);
      this.isSigned = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'isSigned' field has been set.
      * @return True if the 'isSigned' field has been set, false otherwise.
      */
    public boolean hasIsSigned() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'isSigned' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder clearIsSigned() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'token' field.
      * @return The value.
      */
    public java.lang.CharSequence getToken() {
      return token;
    }


    /**
      * Sets the value of the 'token' field.
      * @param value The value of 'token'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder setToken(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.token = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'token' field has been set.
      * @return True if the 'token' field has been set, false otherwise.
      */
    public boolean hasToken() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'token' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder clearToken() {
      token = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'pinpadId' field.
      * @return The value.
      */
    public java.lang.CharSequence getPinpadId() {
      return pinpadId;
    }


    /**
      * Sets the value of the 'pinpadId' field.
      * @param value The value of 'pinpadId'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder setPinpadId(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.pinpadId = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'pinpadId' field has been set.
      * @return True if the 'pinpadId' field has been set, false otherwise.
      */
    public boolean hasPinpadId() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'pinpadId' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder clearPinpadId() {
      pinpadId = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'period' field.
      * @return The value.
      */
    public java.lang.CharSequence getPeriod() {
      return period;
    }


    /**
      * Sets the value of the 'period' field.
      * @param value The value of 'period'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder setPeriod(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.period = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'period' field has been set.
      * @return True if the 'period' field has been set, false otherwise.
      */
    public boolean hasPeriod() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'period' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder clearPeriod() {
      period = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'operationNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getOperationNumber() {
      return operationNumber;
    }


    /**
      * Sets the value of the 'operationNumber' field.
      * @param value The value of 'operationNumber'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder setOperationNumber(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.operationNumber = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'operationNumber' field has been set.
      * @return True if the 'operationNumber' field has been set, false otherwise.
      */
    public boolean hasOperationNumber() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'operationNumber' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder clearOperationNumber() {
      operationNumber = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'isCancelled' field.
      * @return The value.
      */
    public boolean getIsCancelled() {
      return isCancelled;
    }


    /**
      * Sets the value of the 'isCancelled' field.
      * @param value The value of 'isCancelled'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder setIsCancelled(boolean value) {
      validate(fields()[9], value);
      this.isCancelled = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'isCancelled' field has been set.
      * @return True if the 'isCancelled' field has been set, false otherwise.
      */
    public boolean hasIsCancelled() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'isCancelled' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder clearIsCancelled() {
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'receipt' field.
      * @return The value.
      */
    public java.lang.CharSequence getReceipt() {
      return receipt;
    }


    /**
      * Sets the value of the 'receipt' field.
      * @param value The value of 'receipt'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder setReceipt(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.receipt = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'receipt' field has been set.
      * @return True if the 'receipt' field has been set, false otherwise.
      */
    public boolean hasReceipt() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'receipt' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.PaymentMethodCreditCardRecord.Builder clearReceipt() {
      receipt = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentMethodCreditCardRecord build() {
      try {
        PaymentMethodCreditCardRecord record = new PaymentMethodCreditCardRecord();
        if (cardPaymentBuilder != null) {
          try {
            record.cardPayment = this.cardPaymentBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("cardPayment"));
            throw e;
          }
        } else {
          record.cardPayment = fieldSetFlags()[0] ? this.cardPayment : (org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment) defaultValue(fields()[0]);
        }
        record.creditCardId = fieldSetFlags()[1] ? this.creditCardId : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.expirationDate = fieldSetFlags()[2] ? this.expirationDate : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.introductionMethodCard = fieldSetFlags()[3] ? this.introductionMethodCard : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.isSigned = fieldSetFlags()[4] ? this.isSigned : (java.lang.Boolean) defaultValue(fields()[4]);
        record.token = fieldSetFlags()[5] ? this.token : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.pinpadId = fieldSetFlags()[6] ? this.pinpadId : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.period = fieldSetFlags()[7] ? this.period : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.operationNumber = fieldSetFlags()[8] ? this.operationNumber : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.isCancelled = fieldSetFlags()[9] ? this.isCancelled : (java.lang.Boolean) defaultValue(fields()[9]);
        record.receipt = fieldSetFlags()[10] ? this.receipt : (java.lang.CharSequence) defaultValue(fields()[10]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentMethodCreditCardRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentMethodCreditCardRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentMethodCreditCardRecord>
    READER$ = (org.apache.avro.io.DatumReader<PaymentMethodCreditCardRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.cardPayment.customEncode(out);

    out.writeString(this.creditCardId);

    out.writeString(this.expirationDate);

    out.writeString(this.introductionMethodCard);

    out.writeBoolean(this.isSigned);

    out.writeString(this.token);

    out.writeString(this.pinpadId);

    out.writeString(this.period);

    out.writeString(this.operationNumber);

    out.writeBoolean(this.isCancelled);

    out.writeString(this.receipt);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.cardPayment == null) {
        this.cardPayment = new org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment();
      }
      this.cardPayment.customDecode(in);

      this.creditCardId = in.readString(this.creditCardId instanceof Utf8 ? (Utf8)this.creditCardId : null);

      this.expirationDate = in.readString(this.expirationDate instanceof Utf8 ? (Utf8)this.expirationDate : null);

      this.introductionMethodCard = in.readString(this.introductionMethodCard instanceof Utf8 ? (Utf8)this.introductionMethodCard : null);

      this.isSigned = in.readBoolean();

      this.token = in.readString(this.token instanceof Utf8 ? (Utf8)this.token : null);

      this.pinpadId = in.readString(this.pinpadId instanceof Utf8 ? (Utf8)this.pinpadId : null);

      this.period = in.readString(this.period instanceof Utf8 ? (Utf8)this.period : null);

      this.operationNumber = in.readString(this.operationNumber instanceof Utf8 ? (Utf8)this.operationNumber : null);

      this.isCancelled = in.readBoolean();

      this.receipt = in.readString(this.receipt instanceof Utf8 ? (Utf8)this.receipt : null);

    } else {
      for (int i = 0; i < 11; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.cardPayment == null) {
            this.cardPayment = new org.github.ogomezso.scs.infrastructure.model.ticket.CardPayment();
          }
          this.cardPayment.customDecode(in);
          break;

        case 1:
          this.creditCardId = in.readString(this.creditCardId instanceof Utf8 ? (Utf8)this.creditCardId : null);
          break;

        case 2:
          this.expirationDate = in.readString(this.expirationDate instanceof Utf8 ? (Utf8)this.expirationDate : null);
          break;

        case 3:
          this.introductionMethodCard = in.readString(this.introductionMethodCard instanceof Utf8 ? (Utf8)this.introductionMethodCard : null);
          break;

        case 4:
          this.isSigned = in.readBoolean();
          break;

        case 5:
          this.token = in.readString(this.token instanceof Utf8 ? (Utf8)this.token : null);
          break;

        case 6:
          this.pinpadId = in.readString(this.pinpadId instanceof Utf8 ? (Utf8)this.pinpadId : null);
          break;

        case 7:
          this.period = in.readString(this.period instanceof Utf8 ? (Utf8)this.period : null);
          break;

        case 8:
          this.operationNumber = in.readString(this.operationNumber instanceof Utf8 ? (Utf8)this.operationNumber : null);
          break;

        case 9:
          this.isCancelled = in.readBoolean();
          break;

        case 10:
          this.receipt = in.readString(this.receipt instanceof Utf8 ? (Utf8)this.receipt : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










