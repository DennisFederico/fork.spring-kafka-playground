/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.github.ogomezso.scs.infrastructure.model.ticket;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class LinesRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6040352178369323534L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LinesRecord\",\"namespace\":\"org.github.ogomezso.scs.infrastructure.model.ticket\",\"fields\":[{\"name\":\"lineNumber\",\"type\":\"int\"},{\"name\":\"typeOfLine\",\"type\":\"string\"},{\"name\":\"gtin\",\"type\":\"string\"},{\"name\":\"productPublicId\",\"type\":\"string\"},{\"name\":\"productDenomination\",\"type\":\"string\"},{\"name\":\"quantity\",\"type\":\"int\"},{\"name\":\"pvp\",\"type\":\"string\"},{\"name\":\"sectionId\",\"type\":\"string\"},{\"name\":\"lineAmount\",\"type\":\"string\"},{\"name\":\"introductionMethod\",\"type\":\"string\"},{\"name\":\"auxiliarBarcode\",\"type\":\"string\"},{\"name\":\"unknownProductPublicId\",\"type\":\"string\"},{\"name\":\"grossPvp\",\"type\":\"string\"},{\"name\":\"transactionLineTypeId\",\"type\":\"string\"},{\"name\":\"isVatSplitted\",\"type\":\"boolean\"},{\"name\":\"saleTypeScale\",\"type\":\"string\"},{\"name\":\"ticketLineTax\",\"type\":{\"type\":\"record\",\"name\":\"TicketLineTax\",\"fields\":[{\"name\":\"taxClass\",\"type\":\"string\"},{\"name\":\"taxType\",\"type\":\"string\"},{\"name\":\"taxRate\",\"type\":\"string\"},{\"name\":\"taxBase\",\"type\":\"string\"},{\"name\":\"taxCharge\",\"type\":\"string\"},{\"name\":\"isTaxIncluded\",\"type\":\"boolean\"},{\"name\":\"vatLetter\",\"type\":\"string\"}]}},{\"name\":\"typeOfTicketLine\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LinesRecord> ENCODER =
      new BinaryMessageEncoder<LinesRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LinesRecord> DECODER =
      new BinaryMessageDecoder<LinesRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<LinesRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<LinesRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<LinesRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LinesRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this LinesRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a LinesRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a LinesRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static LinesRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private int lineNumber;
  private java.lang.CharSequence typeOfLine;
  private java.lang.CharSequence gtin;
  private java.lang.CharSequence productPublicId;
  private java.lang.CharSequence productDenomination;
  private int quantity;
  private java.lang.CharSequence pvp;
  private java.lang.CharSequence sectionId;
  private java.lang.CharSequence lineAmount;
  private java.lang.CharSequence introductionMethod;
  private java.lang.CharSequence auxiliarBarcode;
  private java.lang.CharSequence unknownProductPublicId;
  private java.lang.CharSequence grossPvp;
  private java.lang.CharSequence transactionLineTypeId;
  private boolean isVatSplitted;
  private java.lang.CharSequence saleTypeScale;
  private org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax ticketLineTax;
  private java.lang.CharSequence typeOfTicketLine;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LinesRecord() {}

  /**
   * All-args constructor.
   * @param lineNumber The new value for lineNumber
   * @param typeOfLine The new value for typeOfLine
   * @param gtin The new value for gtin
   * @param productPublicId The new value for productPublicId
   * @param productDenomination The new value for productDenomination
   * @param quantity The new value for quantity
   * @param pvp The new value for pvp
   * @param sectionId The new value for sectionId
   * @param lineAmount The new value for lineAmount
   * @param introductionMethod The new value for introductionMethod
   * @param auxiliarBarcode The new value for auxiliarBarcode
   * @param unknownProductPublicId The new value for unknownProductPublicId
   * @param grossPvp The new value for grossPvp
   * @param transactionLineTypeId The new value for transactionLineTypeId
   * @param isVatSplitted The new value for isVatSplitted
   * @param saleTypeScale The new value for saleTypeScale
   * @param ticketLineTax The new value for ticketLineTax
   * @param typeOfTicketLine The new value for typeOfTicketLine
   */
  public LinesRecord(java.lang.Integer lineNumber, java.lang.CharSequence typeOfLine, java.lang.CharSequence gtin, java.lang.CharSequence productPublicId, java.lang.CharSequence productDenomination, java.lang.Integer quantity, java.lang.CharSequence pvp, java.lang.CharSequence sectionId, java.lang.CharSequence lineAmount, java.lang.CharSequence introductionMethod, java.lang.CharSequence auxiliarBarcode, java.lang.CharSequence unknownProductPublicId, java.lang.CharSequence grossPvp, java.lang.CharSequence transactionLineTypeId, java.lang.Boolean isVatSplitted, java.lang.CharSequence saleTypeScale, org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax ticketLineTax, java.lang.CharSequence typeOfTicketLine) {
    this.lineNumber = lineNumber;
    this.typeOfLine = typeOfLine;
    this.gtin = gtin;
    this.productPublicId = productPublicId;
    this.productDenomination = productDenomination;
    this.quantity = quantity;
    this.pvp = pvp;
    this.sectionId = sectionId;
    this.lineAmount = lineAmount;
    this.introductionMethod = introductionMethod;
    this.auxiliarBarcode = auxiliarBarcode;
    this.unknownProductPublicId = unknownProductPublicId;
    this.grossPvp = grossPvp;
    this.transactionLineTypeId = transactionLineTypeId;
    this.isVatSplitted = isVatSplitted;
    this.saleTypeScale = saleTypeScale;
    this.ticketLineTax = ticketLineTax;
    this.typeOfTicketLine = typeOfTicketLine;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return lineNumber;
    case 1: return typeOfLine;
    case 2: return gtin;
    case 3: return productPublicId;
    case 4: return productDenomination;
    case 5: return quantity;
    case 6: return pvp;
    case 7: return sectionId;
    case 8: return lineAmount;
    case 9: return introductionMethod;
    case 10: return auxiliarBarcode;
    case 11: return unknownProductPublicId;
    case 12: return grossPvp;
    case 13: return transactionLineTypeId;
    case 14: return isVatSplitted;
    case 15: return saleTypeScale;
    case 16: return ticketLineTax;
    case 17: return typeOfTicketLine;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: lineNumber = (java.lang.Integer)value$; break;
    case 1: typeOfLine = (java.lang.CharSequence)value$; break;
    case 2: gtin = (java.lang.CharSequence)value$; break;
    case 3: productPublicId = (java.lang.CharSequence)value$; break;
    case 4: productDenomination = (java.lang.CharSequence)value$; break;
    case 5: quantity = (java.lang.Integer)value$; break;
    case 6: pvp = (java.lang.CharSequence)value$; break;
    case 7: sectionId = (java.lang.CharSequence)value$; break;
    case 8: lineAmount = (java.lang.CharSequence)value$; break;
    case 9: introductionMethod = (java.lang.CharSequence)value$; break;
    case 10: auxiliarBarcode = (java.lang.CharSequence)value$; break;
    case 11: unknownProductPublicId = (java.lang.CharSequence)value$; break;
    case 12: grossPvp = (java.lang.CharSequence)value$; break;
    case 13: transactionLineTypeId = (java.lang.CharSequence)value$; break;
    case 14: isVatSplitted = (java.lang.Boolean)value$; break;
    case 15: saleTypeScale = (java.lang.CharSequence)value$; break;
    case 16: ticketLineTax = (org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax)value$; break;
    case 17: typeOfTicketLine = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'lineNumber' field.
   * @return The value of the 'lineNumber' field.
   */
  public int getLineNumber() {
    return lineNumber;
  }


  /**
   * Sets the value of the 'lineNumber' field.
   * @param value the value to set.
   */
  public void setLineNumber(int value) {
    this.lineNumber = value;
  }

  /**
   * Gets the value of the 'typeOfLine' field.
   * @return The value of the 'typeOfLine' field.
   */
  public java.lang.CharSequence getTypeOfLine() {
    return typeOfLine;
  }


  /**
   * Sets the value of the 'typeOfLine' field.
   * @param value the value to set.
   */
  public void setTypeOfLine(java.lang.CharSequence value) {
    this.typeOfLine = value;
  }

  /**
   * Gets the value of the 'gtin' field.
   * @return The value of the 'gtin' field.
   */
  public java.lang.CharSequence getGtin() {
    return gtin;
  }


  /**
   * Sets the value of the 'gtin' field.
   * @param value the value to set.
   */
  public void setGtin(java.lang.CharSequence value) {
    this.gtin = value;
  }

  /**
   * Gets the value of the 'productPublicId' field.
   * @return The value of the 'productPublicId' field.
   */
  public java.lang.CharSequence getProductPublicId() {
    return productPublicId;
  }


  /**
   * Sets the value of the 'productPublicId' field.
   * @param value the value to set.
   */
  public void setProductPublicId(java.lang.CharSequence value) {
    this.productPublicId = value;
  }

  /**
   * Gets the value of the 'productDenomination' field.
   * @return The value of the 'productDenomination' field.
   */
  public java.lang.CharSequence getProductDenomination() {
    return productDenomination;
  }


  /**
   * Sets the value of the 'productDenomination' field.
   * @param value the value to set.
   */
  public void setProductDenomination(java.lang.CharSequence value) {
    this.productDenomination = value;
  }

  /**
   * Gets the value of the 'quantity' field.
   * @return The value of the 'quantity' field.
   */
  public int getQuantity() {
    return quantity;
  }


  /**
   * Sets the value of the 'quantity' field.
   * @param value the value to set.
   */
  public void setQuantity(int value) {
    this.quantity = value;
  }

  /**
   * Gets the value of the 'pvp' field.
   * @return The value of the 'pvp' field.
   */
  public java.lang.CharSequence getPvp() {
    return pvp;
  }


  /**
   * Sets the value of the 'pvp' field.
   * @param value the value to set.
   */
  public void setPvp(java.lang.CharSequence value) {
    this.pvp = value;
  }

  /**
   * Gets the value of the 'sectionId' field.
   * @return The value of the 'sectionId' field.
   */
  public java.lang.CharSequence getSectionId() {
    return sectionId;
  }


  /**
   * Sets the value of the 'sectionId' field.
   * @param value the value to set.
   */
  public void setSectionId(java.lang.CharSequence value) {
    this.sectionId = value;
  }

  /**
   * Gets the value of the 'lineAmount' field.
   * @return The value of the 'lineAmount' field.
   */
  public java.lang.CharSequence getLineAmount() {
    return lineAmount;
  }


  /**
   * Sets the value of the 'lineAmount' field.
   * @param value the value to set.
   */
  public void setLineAmount(java.lang.CharSequence value) {
    this.lineAmount = value;
  }

  /**
   * Gets the value of the 'introductionMethod' field.
   * @return The value of the 'introductionMethod' field.
   */
  public java.lang.CharSequence getIntroductionMethod() {
    return introductionMethod;
  }


  /**
   * Sets the value of the 'introductionMethod' field.
   * @param value the value to set.
   */
  public void setIntroductionMethod(java.lang.CharSequence value) {
    this.introductionMethod = value;
  }

  /**
   * Gets the value of the 'auxiliarBarcode' field.
   * @return The value of the 'auxiliarBarcode' field.
   */
  public java.lang.CharSequence getAuxiliarBarcode() {
    return auxiliarBarcode;
  }


  /**
   * Sets the value of the 'auxiliarBarcode' field.
   * @param value the value to set.
   */
  public void setAuxiliarBarcode(java.lang.CharSequence value) {
    this.auxiliarBarcode = value;
  }

  /**
   * Gets the value of the 'unknownProductPublicId' field.
   * @return The value of the 'unknownProductPublicId' field.
   */
  public java.lang.CharSequence getUnknownProductPublicId() {
    return unknownProductPublicId;
  }


  /**
   * Sets the value of the 'unknownProductPublicId' field.
   * @param value the value to set.
   */
  public void setUnknownProductPublicId(java.lang.CharSequence value) {
    this.unknownProductPublicId = value;
  }

  /**
   * Gets the value of the 'grossPvp' field.
   * @return The value of the 'grossPvp' field.
   */
  public java.lang.CharSequence getGrossPvp() {
    return grossPvp;
  }


  /**
   * Sets the value of the 'grossPvp' field.
   * @param value the value to set.
   */
  public void setGrossPvp(java.lang.CharSequence value) {
    this.grossPvp = value;
  }

  /**
   * Gets the value of the 'transactionLineTypeId' field.
   * @return The value of the 'transactionLineTypeId' field.
   */
  public java.lang.CharSequence getTransactionLineTypeId() {
    return transactionLineTypeId;
  }


  /**
   * Sets the value of the 'transactionLineTypeId' field.
   * @param value the value to set.
   */
  public void setTransactionLineTypeId(java.lang.CharSequence value) {
    this.transactionLineTypeId = value;
  }

  /**
   * Gets the value of the 'isVatSplitted' field.
   * @return The value of the 'isVatSplitted' field.
   */
  public boolean getIsVatSplitted() {
    return isVatSplitted;
  }


  /**
   * Sets the value of the 'isVatSplitted' field.
   * @param value the value to set.
   */
  public void setIsVatSplitted(boolean value) {
    this.isVatSplitted = value;
  }

  /**
   * Gets the value of the 'saleTypeScale' field.
   * @return The value of the 'saleTypeScale' field.
   */
  public java.lang.CharSequence getSaleTypeScale() {
    return saleTypeScale;
  }


  /**
   * Sets the value of the 'saleTypeScale' field.
   * @param value the value to set.
   */
  public void setSaleTypeScale(java.lang.CharSequence value) {
    this.saleTypeScale = value;
  }

  /**
   * Gets the value of the 'ticketLineTax' field.
   * @return The value of the 'ticketLineTax' field.
   */
  public org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax getTicketLineTax() {
    return ticketLineTax;
  }


  /**
   * Sets the value of the 'ticketLineTax' field.
   * @param value the value to set.
   */
  public void setTicketLineTax(org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax value) {
    this.ticketLineTax = value;
  }

  /**
   * Gets the value of the 'typeOfTicketLine' field.
   * @return The value of the 'typeOfTicketLine' field.
   */
  public java.lang.CharSequence getTypeOfTicketLine() {
    return typeOfTicketLine;
  }


  /**
   * Sets the value of the 'typeOfTicketLine' field.
   * @param value the value to set.
   */
  public void setTypeOfTicketLine(java.lang.CharSequence value) {
    this.typeOfTicketLine = value;
  }

  /**
   * Creates a new LinesRecord RecordBuilder.
   * @return A new LinesRecord RecordBuilder
   */
  public static org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder newBuilder() {
    return new org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder();
  }

  /**
   * Creates a new LinesRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LinesRecord RecordBuilder
   */
  public static org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder newBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder other) {
    if (other == null) {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder();
    } else {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder(other);
    }
  }

  /**
   * Creates a new LinesRecord RecordBuilder by copying an existing LinesRecord instance.
   * @param other The existing instance to copy.
   * @return A new LinesRecord RecordBuilder
   */
  public static org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder newBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord other) {
    if (other == null) {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder();
    } else {
      return new org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for LinesRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LinesRecord>
    implements org.apache.avro.data.RecordBuilder<LinesRecord> {

    private int lineNumber;
    private java.lang.CharSequence typeOfLine;
    private java.lang.CharSequence gtin;
    private java.lang.CharSequence productPublicId;
    private java.lang.CharSequence productDenomination;
    private int quantity;
    private java.lang.CharSequence pvp;
    private java.lang.CharSequence sectionId;
    private java.lang.CharSequence lineAmount;
    private java.lang.CharSequence introductionMethod;
    private java.lang.CharSequence auxiliarBarcode;
    private java.lang.CharSequence unknownProductPublicId;
    private java.lang.CharSequence grossPvp;
    private java.lang.CharSequence transactionLineTypeId;
    private boolean isVatSplitted;
    private java.lang.CharSequence saleTypeScale;
    private org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax ticketLineTax;
    private org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax.Builder ticketLineTaxBuilder;
    private java.lang.CharSequence typeOfTicketLine;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.lineNumber)) {
        this.lineNumber = data().deepCopy(fields()[0].schema(), other.lineNumber);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.typeOfLine)) {
        this.typeOfLine = data().deepCopy(fields()[1].schema(), other.typeOfLine);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.gtin)) {
        this.gtin = data().deepCopy(fields()[2].schema(), other.gtin);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.productPublicId)) {
        this.productPublicId = data().deepCopy(fields()[3].schema(), other.productPublicId);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.productDenomination)) {
        this.productDenomination = data().deepCopy(fields()[4].schema(), other.productDenomination);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.quantity)) {
        this.quantity = data().deepCopy(fields()[5].schema(), other.quantity);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.pvp)) {
        this.pvp = data().deepCopy(fields()[6].schema(), other.pvp);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.sectionId)) {
        this.sectionId = data().deepCopy(fields()[7].schema(), other.sectionId);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.lineAmount)) {
        this.lineAmount = data().deepCopy(fields()[8].schema(), other.lineAmount);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.introductionMethod)) {
        this.introductionMethod = data().deepCopy(fields()[9].schema(), other.introductionMethod);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.auxiliarBarcode)) {
        this.auxiliarBarcode = data().deepCopy(fields()[10].schema(), other.auxiliarBarcode);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.unknownProductPublicId)) {
        this.unknownProductPublicId = data().deepCopy(fields()[11].schema(), other.unknownProductPublicId);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.grossPvp)) {
        this.grossPvp = data().deepCopy(fields()[12].schema(), other.grossPvp);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.transactionLineTypeId)) {
        this.transactionLineTypeId = data().deepCopy(fields()[13].schema(), other.transactionLineTypeId);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.isVatSplitted)) {
        this.isVatSplitted = data().deepCopy(fields()[14].schema(), other.isVatSplitted);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.saleTypeScale)) {
        this.saleTypeScale = data().deepCopy(fields()[15].schema(), other.saleTypeScale);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.ticketLineTax)) {
        this.ticketLineTax = data().deepCopy(fields()[16].schema(), other.ticketLineTax);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (other.hasTicketLineTaxBuilder()) {
        this.ticketLineTaxBuilder = org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax.newBuilder(other.getTicketLineTaxBuilder());
      }
      if (isValidValue(fields()[17], other.typeOfTicketLine)) {
        this.typeOfTicketLine = data().deepCopy(fields()[17].schema(), other.typeOfTicketLine);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
    }

    /**
     * Creates a Builder by copying an existing LinesRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.lineNumber)) {
        this.lineNumber = data().deepCopy(fields()[0].schema(), other.lineNumber);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.typeOfLine)) {
        this.typeOfLine = data().deepCopy(fields()[1].schema(), other.typeOfLine);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.gtin)) {
        this.gtin = data().deepCopy(fields()[2].schema(), other.gtin);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.productPublicId)) {
        this.productPublicId = data().deepCopy(fields()[3].schema(), other.productPublicId);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.productDenomination)) {
        this.productDenomination = data().deepCopy(fields()[4].schema(), other.productDenomination);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.quantity)) {
        this.quantity = data().deepCopy(fields()[5].schema(), other.quantity);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.pvp)) {
        this.pvp = data().deepCopy(fields()[6].schema(), other.pvp);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.sectionId)) {
        this.sectionId = data().deepCopy(fields()[7].schema(), other.sectionId);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.lineAmount)) {
        this.lineAmount = data().deepCopy(fields()[8].schema(), other.lineAmount);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.introductionMethod)) {
        this.introductionMethod = data().deepCopy(fields()[9].schema(), other.introductionMethod);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.auxiliarBarcode)) {
        this.auxiliarBarcode = data().deepCopy(fields()[10].schema(), other.auxiliarBarcode);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.unknownProductPublicId)) {
        this.unknownProductPublicId = data().deepCopy(fields()[11].schema(), other.unknownProductPublicId);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.grossPvp)) {
        this.grossPvp = data().deepCopy(fields()[12].schema(), other.grossPvp);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.transactionLineTypeId)) {
        this.transactionLineTypeId = data().deepCopy(fields()[13].schema(), other.transactionLineTypeId);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.isVatSplitted)) {
        this.isVatSplitted = data().deepCopy(fields()[14].schema(), other.isVatSplitted);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.saleTypeScale)) {
        this.saleTypeScale = data().deepCopy(fields()[15].schema(), other.saleTypeScale);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.ticketLineTax)) {
        this.ticketLineTax = data().deepCopy(fields()[16].schema(), other.ticketLineTax);
        fieldSetFlags()[16] = true;
      }
      this.ticketLineTaxBuilder = null;
      if (isValidValue(fields()[17], other.typeOfTicketLine)) {
        this.typeOfTicketLine = data().deepCopy(fields()[17].schema(), other.typeOfTicketLine);
        fieldSetFlags()[17] = true;
      }
    }

    /**
      * Gets the value of the 'lineNumber' field.
      * @return The value.
      */
    public int getLineNumber() {
      return lineNumber;
    }


    /**
      * Sets the value of the 'lineNumber' field.
      * @param value The value of 'lineNumber'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setLineNumber(int value) {
      validate(fields()[0], value);
      this.lineNumber = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'lineNumber' field has been set.
      * @return True if the 'lineNumber' field has been set, false otherwise.
      */
    public boolean hasLineNumber() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'lineNumber' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearLineNumber() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'typeOfLine' field.
      * @return The value.
      */
    public java.lang.CharSequence getTypeOfLine() {
      return typeOfLine;
    }


    /**
      * Sets the value of the 'typeOfLine' field.
      * @param value The value of 'typeOfLine'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setTypeOfLine(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.typeOfLine = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'typeOfLine' field has been set.
      * @return True if the 'typeOfLine' field has been set, false otherwise.
      */
    public boolean hasTypeOfLine() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'typeOfLine' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearTypeOfLine() {
      typeOfLine = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'gtin' field.
      * @return The value.
      */
    public java.lang.CharSequence getGtin() {
      return gtin;
    }


    /**
      * Sets the value of the 'gtin' field.
      * @param value The value of 'gtin'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setGtin(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.gtin = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'gtin' field has been set.
      * @return True if the 'gtin' field has been set, false otherwise.
      */
    public boolean hasGtin() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'gtin' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearGtin() {
      gtin = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'productPublicId' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductPublicId() {
      return productPublicId;
    }


    /**
      * Sets the value of the 'productPublicId' field.
      * @param value The value of 'productPublicId'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setProductPublicId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.productPublicId = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'productPublicId' field has been set.
      * @return True if the 'productPublicId' field has been set, false otherwise.
      */
    public boolean hasProductPublicId() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'productPublicId' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearProductPublicId() {
      productPublicId = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'productDenomination' field.
      * @return The value.
      */
    public java.lang.CharSequence getProductDenomination() {
      return productDenomination;
    }


    /**
      * Sets the value of the 'productDenomination' field.
      * @param value The value of 'productDenomination'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setProductDenomination(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.productDenomination = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'productDenomination' field has been set.
      * @return True if the 'productDenomination' field has been set, false otherwise.
      */
    public boolean hasProductDenomination() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'productDenomination' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearProductDenomination() {
      productDenomination = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'quantity' field.
      * @return The value.
      */
    public int getQuantity() {
      return quantity;
    }


    /**
      * Sets the value of the 'quantity' field.
      * @param value The value of 'quantity'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setQuantity(int value) {
      validate(fields()[5], value);
      this.quantity = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'quantity' field has been set.
      * @return True if the 'quantity' field has been set, false otherwise.
      */
    public boolean hasQuantity() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'quantity' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearQuantity() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'pvp' field.
      * @return The value.
      */
    public java.lang.CharSequence getPvp() {
      return pvp;
    }


    /**
      * Sets the value of the 'pvp' field.
      * @param value The value of 'pvp'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setPvp(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.pvp = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'pvp' field has been set.
      * @return True if the 'pvp' field has been set, false otherwise.
      */
    public boolean hasPvp() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'pvp' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearPvp() {
      pvp = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'sectionId' field.
      * @return The value.
      */
    public java.lang.CharSequence getSectionId() {
      return sectionId;
    }


    /**
      * Sets the value of the 'sectionId' field.
      * @param value The value of 'sectionId'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setSectionId(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.sectionId = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'sectionId' field has been set.
      * @return True if the 'sectionId' field has been set, false otherwise.
      */
    public boolean hasSectionId() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'sectionId' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearSectionId() {
      sectionId = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'lineAmount' field.
      * @return The value.
      */
    public java.lang.CharSequence getLineAmount() {
      return lineAmount;
    }


    /**
      * Sets the value of the 'lineAmount' field.
      * @param value The value of 'lineAmount'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setLineAmount(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.lineAmount = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'lineAmount' field has been set.
      * @return True if the 'lineAmount' field has been set, false otherwise.
      */
    public boolean hasLineAmount() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'lineAmount' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearLineAmount() {
      lineAmount = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'introductionMethod' field.
      * @return The value.
      */
    public java.lang.CharSequence getIntroductionMethod() {
      return introductionMethod;
    }


    /**
      * Sets the value of the 'introductionMethod' field.
      * @param value The value of 'introductionMethod'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setIntroductionMethod(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.introductionMethod = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'introductionMethod' field has been set.
      * @return True if the 'introductionMethod' field has been set, false otherwise.
      */
    public boolean hasIntroductionMethod() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'introductionMethod' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearIntroductionMethod() {
      introductionMethod = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'auxiliarBarcode' field.
      * @return The value.
      */
    public java.lang.CharSequence getAuxiliarBarcode() {
      return auxiliarBarcode;
    }


    /**
      * Sets the value of the 'auxiliarBarcode' field.
      * @param value The value of 'auxiliarBarcode'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setAuxiliarBarcode(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.auxiliarBarcode = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'auxiliarBarcode' field has been set.
      * @return True if the 'auxiliarBarcode' field has been set, false otherwise.
      */
    public boolean hasAuxiliarBarcode() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'auxiliarBarcode' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearAuxiliarBarcode() {
      auxiliarBarcode = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'unknownProductPublicId' field.
      * @return The value.
      */
    public java.lang.CharSequence getUnknownProductPublicId() {
      return unknownProductPublicId;
    }


    /**
      * Sets the value of the 'unknownProductPublicId' field.
      * @param value The value of 'unknownProductPublicId'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setUnknownProductPublicId(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.unknownProductPublicId = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'unknownProductPublicId' field has been set.
      * @return True if the 'unknownProductPublicId' field has been set, false otherwise.
      */
    public boolean hasUnknownProductPublicId() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'unknownProductPublicId' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearUnknownProductPublicId() {
      unknownProductPublicId = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'grossPvp' field.
      * @return The value.
      */
    public java.lang.CharSequence getGrossPvp() {
      return grossPvp;
    }


    /**
      * Sets the value of the 'grossPvp' field.
      * @param value The value of 'grossPvp'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setGrossPvp(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.grossPvp = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'grossPvp' field has been set.
      * @return True if the 'grossPvp' field has been set, false otherwise.
      */
    public boolean hasGrossPvp() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'grossPvp' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearGrossPvp() {
      grossPvp = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'transactionLineTypeId' field.
      * @return The value.
      */
    public java.lang.CharSequence getTransactionLineTypeId() {
      return transactionLineTypeId;
    }


    /**
      * Sets the value of the 'transactionLineTypeId' field.
      * @param value The value of 'transactionLineTypeId'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setTransactionLineTypeId(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.transactionLineTypeId = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'transactionLineTypeId' field has been set.
      * @return True if the 'transactionLineTypeId' field has been set, false otherwise.
      */
    public boolean hasTransactionLineTypeId() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'transactionLineTypeId' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearTransactionLineTypeId() {
      transactionLineTypeId = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'isVatSplitted' field.
      * @return The value.
      */
    public boolean getIsVatSplitted() {
      return isVatSplitted;
    }


    /**
      * Sets the value of the 'isVatSplitted' field.
      * @param value The value of 'isVatSplitted'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setIsVatSplitted(boolean value) {
      validate(fields()[14], value);
      this.isVatSplitted = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'isVatSplitted' field has been set.
      * @return True if the 'isVatSplitted' field has been set, false otherwise.
      */
    public boolean hasIsVatSplitted() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'isVatSplitted' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearIsVatSplitted() {
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'saleTypeScale' field.
      * @return The value.
      */
    public java.lang.CharSequence getSaleTypeScale() {
      return saleTypeScale;
    }


    /**
      * Sets the value of the 'saleTypeScale' field.
      * @param value The value of 'saleTypeScale'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setSaleTypeScale(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.saleTypeScale = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'saleTypeScale' field has been set.
      * @return True if the 'saleTypeScale' field has been set, false otherwise.
      */
    public boolean hasSaleTypeScale() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'saleTypeScale' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearSaleTypeScale() {
      saleTypeScale = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'ticketLineTax' field.
      * @return The value.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax getTicketLineTax() {
      return ticketLineTax;
    }


    /**
      * Sets the value of the 'ticketLineTax' field.
      * @param value The value of 'ticketLineTax'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setTicketLineTax(org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax value) {
      validate(fields()[16], value);
      this.ticketLineTaxBuilder = null;
      this.ticketLineTax = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'ticketLineTax' field has been set.
      * @return True if the 'ticketLineTax' field has been set, false otherwise.
      */
    public boolean hasTicketLineTax() {
      return fieldSetFlags()[16];
    }

    /**
     * Gets the Builder instance for the 'ticketLineTax' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax.Builder getTicketLineTaxBuilder() {
      if (ticketLineTaxBuilder == null) {
        if (hasTicketLineTax()) {
          setTicketLineTaxBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax.newBuilder(ticketLineTax));
        } else {
          setTicketLineTaxBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax.newBuilder());
        }
      }
      return ticketLineTaxBuilder;
    }

    /**
     * Sets the Builder instance for the 'ticketLineTax' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setTicketLineTaxBuilder(org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax.Builder value) {
      clearTicketLineTax();
      ticketLineTaxBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'ticketLineTax' field has an active Builder instance
     * @return True if the 'ticketLineTax' field has an active Builder instance
     */
    public boolean hasTicketLineTaxBuilder() {
      return ticketLineTaxBuilder != null;
    }

    /**
      * Clears the value of the 'ticketLineTax' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearTicketLineTax() {
      ticketLineTax = null;
      ticketLineTaxBuilder = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'typeOfTicketLine' field.
      * @return The value.
      */
    public java.lang.CharSequence getTypeOfTicketLine() {
      return typeOfTicketLine;
    }


    /**
      * Sets the value of the 'typeOfTicketLine' field.
      * @param value The value of 'typeOfTicketLine'.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder setTypeOfTicketLine(java.lang.CharSequence value) {
      validate(fields()[17], value);
      this.typeOfTicketLine = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'typeOfTicketLine' field has been set.
      * @return True if the 'typeOfTicketLine' field has been set, false otherwise.
      */
    public boolean hasTypeOfTicketLine() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'typeOfTicketLine' field.
      * @return This builder.
      */
    public org.github.ogomezso.scs.infrastructure.model.ticket.LinesRecord.Builder clearTypeOfTicketLine() {
      typeOfTicketLine = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LinesRecord build() {
      try {
        LinesRecord record = new LinesRecord();
        record.lineNumber = fieldSetFlags()[0] ? this.lineNumber : (java.lang.Integer) defaultValue(fields()[0]);
        record.typeOfLine = fieldSetFlags()[1] ? this.typeOfLine : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.gtin = fieldSetFlags()[2] ? this.gtin : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.productPublicId = fieldSetFlags()[3] ? this.productPublicId : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.productDenomination = fieldSetFlags()[4] ? this.productDenomination : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.quantity = fieldSetFlags()[5] ? this.quantity : (java.lang.Integer) defaultValue(fields()[5]);
        record.pvp = fieldSetFlags()[6] ? this.pvp : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.sectionId = fieldSetFlags()[7] ? this.sectionId : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.lineAmount = fieldSetFlags()[8] ? this.lineAmount : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.introductionMethod = fieldSetFlags()[9] ? this.introductionMethod : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.auxiliarBarcode = fieldSetFlags()[10] ? this.auxiliarBarcode : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.unknownProductPublicId = fieldSetFlags()[11] ? this.unknownProductPublicId : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.grossPvp = fieldSetFlags()[12] ? this.grossPvp : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.transactionLineTypeId = fieldSetFlags()[13] ? this.transactionLineTypeId : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.isVatSplitted = fieldSetFlags()[14] ? this.isVatSplitted : (java.lang.Boolean) defaultValue(fields()[14]);
        record.saleTypeScale = fieldSetFlags()[15] ? this.saleTypeScale : (java.lang.CharSequence) defaultValue(fields()[15]);
        if (ticketLineTaxBuilder != null) {
          try {
            record.ticketLineTax = this.ticketLineTaxBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("ticketLineTax"));
            throw e;
          }
        } else {
          record.ticketLineTax = fieldSetFlags()[16] ? this.ticketLineTax : (org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax) defaultValue(fields()[16]);
        }
        record.typeOfTicketLine = fieldSetFlags()[17] ? this.typeOfTicketLine : (java.lang.CharSequence) defaultValue(fields()[17]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LinesRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<LinesRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LinesRecord>
    READER$ = (org.apache.avro.io.DatumReader<LinesRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.lineNumber);

    out.writeString(this.typeOfLine);

    out.writeString(this.gtin);

    out.writeString(this.productPublicId);

    out.writeString(this.productDenomination);

    out.writeInt(this.quantity);

    out.writeString(this.pvp);

    out.writeString(this.sectionId);

    out.writeString(this.lineAmount);

    out.writeString(this.introductionMethod);

    out.writeString(this.auxiliarBarcode);

    out.writeString(this.unknownProductPublicId);

    out.writeString(this.grossPvp);

    out.writeString(this.transactionLineTypeId);

    out.writeBoolean(this.isVatSplitted);

    out.writeString(this.saleTypeScale);

    this.ticketLineTax.customEncode(out);

    out.writeString(this.typeOfTicketLine);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.lineNumber = in.readInt();

      this.typeOfLine = in.readString(this.typeOfLine instanceof Utf8 ? (Utf8)this.typeOfLine : null);

      this.gtin = in.readString(this.gtin instanceof Utf8 ? (Utf8)this.gtin : null);

      this.productPublicId = in.readString(this.productPublicId instanceof Utf8 ? (Utf8)this.productPublicId : null);

      this.productDenomination = in.readString(this.productDenomination instanceof Utf8 ? (Utf8)this.productDenomination : null);

      this.quantity = in.readInt();

      this.pvp = in.readString(this.pvp instanceof Utf8 ? (Utf8)this.pvp : null);

      this.sectionId = in.readString(this.sectionId instanceof Utf8 ? (Utf8)this.sectionId : null);

      this.lineAmount = in.readString(this.lineAmount instanceof Utf8 ? (Utf8)this.lineAmount : null);

      this.introductionMethod = in.readString(this.introductionMethod instanceof Utf8 ? (Utf8)this.introductionMethod : null);

      this.auxiliarBarcode = in.readString(this.auxiliarBarcode instanceof Utf8 ? (Utf8)this.auxiliarBarcode : null);

      this.unknownProductPublicId = in.readString(this.unknownProductPublicId instanceof Utf8 ? (Utf8)this.unknownProductPublicId : null);

      this.grossPvp = in.readString(this.grossPvp instanceof Utf8 ? (Utf8)this.grossPvp : null);

      this.transactionLineTypeId = in.readString(this.transactionLineTypeId instanceof Utf8 ? (Utf8)this.transactionLineTypeId : null);

      this.isVatSplitted = in.readBoolean();

      this.saleTypeScale = in.readString(this.saleTypeScale instanceof Utf8 ? (Utf8)this.saleTypeScale : null);

      if (this.ticketLineTax == null) {
        this.ticketLineTax = new org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax();
      }
      this.ticketLineTax.customDecode(in);

      this.typeOfTicketLine = in.readString(this.typeOfTicketLine instanceof Utf8 ? (Utf8)this.typeOfTicketLine : null);

    } else {
      for (int i = 0; i < 18; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.lineNumber = in.readInt();
          break;

        case 1:
          this.typeOfLine = in.readString(this.typeOfLine instanceof Utf8 ? (Utf8)this.typeOfLine : null);
          break;

        case 2:
          this.gtin = in.readString(this.gtin instanceof Utf8 ? (Utf8)this.gtin : null);
          break;

        case 3:
          this.productPublicId = in.readString(this.productPublicId instanceof Utf8 ? (Utf8)this.productPublicId : null);
          break;

        case 4:
          this.productDenomination = in.readString(this.productDenomination instanceof Utf8 ? (Utf8)this.productDenomination : null);
          break;

        case 5:
          this.quantity = in.readInt();
          break;

        case 6:
          this.pvp = in.readString(this.pvp instanceof Utf8 ? (Utf8)this.pvp : null);
          break;

        case 7:
          this.sectionId = in.readString(this.sectionId instanceof Utf8 ? (Utf8)this.sectionId : null);
          break;

        case 8:
          this.lineAmount = in.readString(this.lineAmount instanceof Utf8 ? (Utf8)this.lineAmount : null);
          break;

        case 9:
          this.introductionMethod = in.readString(this.introductionMethod instanceof Utf8 ? (Utf8)this.introductionMethod : null);
          break;

        case 10:
          this.auxiliarBarcode = in.readString(this.auxiliarBarcode instanceof Utf8 ? (Utf8)this.auxiliarBarcode : null);
          break;

        case 11:
          this.unknownProductPublicId = in.readString(this.unknownProductPublicId instanceof Utf8 ? (Utf8)this.unknownProductPublicId : null);
          break;

        case 12:
          this.grossPvp = in.readString(this.grossPvp instanceof Utf8 ? (Utf8)this.grossPvp : null);
          break;

        case 13:
          this.transactionLineTypeId = in.readString(this.transactionLineTypeId instanceof Utf8 ? (Utf8)this.transactionLineTypeId : null);
          break;

        case 14:
          this.isVatSplitted = in.readBoolean();
          break;

        case 15:
          this.saleTypeScale = in.readString(this.saleTypeScale instanceof Utf8 ? (Utf8)this.saleTypeScale : null);
          break;

        case 16:
          if (this.ticketLineTax == null) {
            this.ticketLineTax = new org.github.ogomezso.scs.infrastructure.model.ticket.TicketLineTax();
          }
          this.ticketLineTax.customDecode(in);
          break;

        case 17:
          this.typeOfTicketLine = in.readString(this.typeOfTicketLine instanceof Utf8 ? (Utf8)this.typeOfTicketLine : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










