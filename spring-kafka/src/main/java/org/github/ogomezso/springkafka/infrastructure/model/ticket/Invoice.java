/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.github.ogomezso.springkafka.infrastructure.model.ticket;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Invoice extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8585746301354632157L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Invoice\",\"namespace\":\"org.github.ogomezso.springkafka.infrastructure.model.ticket\",\"fields\":[{\"name\":\"invoiceHandOverTypeId\",\"type\":\"string\"},{\"name\":\"vatNumber\",\"type\":\"string\"},{\"name\":\"branchOfficeId\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Invoice> ENCODER =
      new BinaryMessageEncoder<Invoice>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Invoice> DECODER =
      new BinaryMessageDecoder<Invoice>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Invoice> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Invoice> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Invoice> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Invoice>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Invoice to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Invoice from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Invoice instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Invoice fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence invoiceHandOverTypeId;
  private java.lang.CharSequence vatNumber;
  private java.lang.CharSequence branchOfficeId;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Invoice() {}

  /**
   * All-args constructor.
   * @param invoiceHandOverTypeId The new value for invoiceHandOverTypeId
   * @param vatNumber The new value for vatNumber
   * @param branchOfficeId The new value for branchOfficeId
   */
  public Invoice(java.lang.CharSequence invoiceHandOverTypeId, java.lang.CharSequence vatNumber, java.lang.CharSequence branchOfficeId) {
    this.invoiceHandOverTypeId = invoiceHandOverTypeId;
    this.vatNumber = vatNumber;
    this.branchOfficeId = branchOfficeId;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return invoiceHandOverTypeId;
    case 1: return vatNumber;
    case 2: return branchOfficeId;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: invoiceHandOverTypeId = (java.lang.CharSequence)value$; break;
    case 1: vatNumber = (java.lang.CharSequence)value$; break;
    case 2: branchOfficeId = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'invoiceHandOverTypeId' field.
   * @return The value of the 'invoiceHandOverTypeId' field.
   */
  public java.lang.CharSequence getInvoiceHandOverTypeId() {
    return invoiceHandOverTypeId;
  }


  /**
   * Sets the value of the 'invoiceHandOverTypeId' field.
   * @param value the value to set.
   */
  public void setInvoiceHandOverTypeId(java.lang.CharSequence value) {
    this.invoiceHandOverTypeId = value;
  }

  /**
   * Gets the value of the 'vatNumber' field.
   * @return The value of the 'vatNumber' field.
   */
  public java.lang.CharSequence getVatNumber() {
    return vatNumber;
  }


  /**
   * Sets the value of the 'vatNumber' field.
   * @param value the value to set.
   */
  public void setVatNumber(java.lang.CharSequence value) {
    this.vatNumber = value;
  }

  /**
   * Gets the value of the 'branchOfficeId' field.
   * @return The value of the 'branchOfficeId' field.
   */
  public java.lang.CharSequence getBranchOfficeId() {
    return branchOfficeId;
  }


  /**
   * Sets the value of the 'branchOfficeId' field.
   * @param value the value to set.
   */
  public void setBranchOfficeId(java.lang.CharSequence value) {
    this.branchOfficeId = value;
  }

  /**
   * Creates a new Invoice RecordBuilder.
   * @return A new Invoice RecordBuilder
   */
  public static org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder newBuilder() {
    return new org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder();
  }

  /**
   * Creates a new Invoice RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Invoice RecordBuilder
   */
  public static org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder newBuilder(org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder other) {
    if (other == null) {
      return new org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder();
    } else {
      return new org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder(other);
    }
  }

  /**
   * Creates a new Invoice RecordBuilder by copying an existing Invoice instance.
   * @param other The existing instance to copy.
   * @return A new Invoice RecordBuilder
   */
  public static org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder newBuilder(org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice other) {
    if (other == null) {
      return new org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder();
    } else {
      return new org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder(other);
    }
  }

  /**
   * RecordBuilder for Invoice instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Invoice>
    implements org.apache.avro.data.RecordBuilder<Invoice> {

    private java.lang.CharSequence invoiceHandOverTypeId;
    private java.lang.CharSequence vatNumber;
    private java.lang.CharSequence branchOfficeId;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.invoiceHandOverTypeId)) {
        this.invoiceHandOverTypeId = data().deepCopy(fields()[0].schema(), other.invoiceHandOverTypeId);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.vatNumber)) {
        this.vatNumber = data().deepCopy(fields()[1].schema(), other.vatNumber);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.branchOfficeId)) {
        this.branchOfficeId = data().deepCopy(fields()[2].schema(), other.branchOfficeId);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Invoice instance
     * @param other The existing instance to copy.
     */
    private Builder(org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.invoiceHandOverTypeId)) {
        this.invoiceHandOverTypeId = data().deepCopy(fields()[0].schema(), other.invoiceHandOverTypeId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.vatNumber)) {
        this.vatNumber = data().deepCopy(fields()[1].schema(), other.vatNumber);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.branchOfficeId)) {
        this.branchOfficeId = data().deepCopy(fields()[2].schema(), other.branchOfficeId);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'invoiceHandOverTypeId' field.
      * @return The value.
      */
    public java.lang.CharSequence getInvoiceHandOverTypeId() {
      return invoiceHandOverTypeId;
    }


    /**
      * Sets the value of the 'invoiceHandOverTypeId' field.
      * @param value The value of 'invoiceHandOverTypeId'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder setInvoiceHandOverTypeId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.invoiceHandOverTypeId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'invoiceHandOverTypeId' field has been set.
      * @return True if the 'invoiceHandOverTypeId' field has been set, false otherwise.
      */
    public boolean hasInvoiceHandOverTypeId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'invoiceHandOverTypeId' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder clearInvoiceHandOverTypeId() {
      invoiceHandOverTypeId = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'vatNumber' field.
      * @return The value.
      */
    public java.lang.CharSequence getVatNumber() {
      return vatNumber;
    }


    /**
      * Sets the value of the 'vatNumber' field.
      * @param value The value of 'vatNumber'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder setVatNumber(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.vatNumber = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'vatNumber' field has been set.
      * @return True if the 'vatNumber' field has been set, false otherwise.
      */
    public boolean hasVatNumber() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'vatNumber' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder clearVatNumber() {
      vatNumber = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'branchOfficeId' field.
      * @return The value.
      */
    public java.lang.CharSequence getBranchOfficeId() {
      return branchOfficeId;
    }


    /**
      * Sets the value of the 'branchOfficeId' field.
      * @param value The value of 'branchOfficeId'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder setBranchOfficeId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.branchOfficeId = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'branchOfficeId' field has been set.
      * @return True if the 'branchOfficeId' field has been set, false otherwise.
      */
    public boolean hasBranchOfficeId() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'branchOfficeId' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.Invoice.Builder clearBranchOfficeId() {
      branchOfficeId = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Invoice build() {
      try {
        Invoice record = new Invoice();
        record.invoiceHandOverTypeId = fieldSetFlags()[0] ? this.invoiceHandOverTypeId : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.vatNumber = fieldSetFlags()[1] ? this.vatNumber : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.branchOfficeId = fieldSetFlags()[2] ? this.branchOfficeId : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Invoice>
    WRITER$ = (org.apache.avro.io.DatumWriter<Invoice>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Invoice>
    READER$ = (org.apache.avro.io.DatumReader<Invoice>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.invoiceHandOverTypeId);

    out.writeString(this.vatNumber);

    out.writeString(this.branchOfficeId);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.invoiceHandOverTypeId = in.readString(this.invoiceHandOverTypeId instanceof Utf8 ? (Utf8)this.invoiceHandOverTypeId : null);

      this.vatNumber = in.readString(this.vatNumber instanceof Utf8 ? (Utf8)this.vatNumber : null);

      this.branchOfficeId = in.readString(this.branchOfficeId instanceof Utf8 ? (Utf8)this.branchOfficeId : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.invoiceHandOverTypeId = in.readString(this.invoiceHandOverTypeId instanceof Utf8 ? (Utf8)this.invoiceHandOverTypeId : null);
          break;

        case 1:
          this.vatNumber = in.readString(this.vatNumber instanceof Utf8 ? (Utf8)this.vatNumber : null);
          break;

        case 2:
          this.branchOfficeId = in.readString(this.branchOfficeId instanceof Utf8 ? (Utf8)this.branchOfficeId : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










