/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.github.ogomezso.springkafka.infrastructure.model.ticket;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TotalTaxRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8314829032008572104L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TotalTaxRecord\",\"namespace\":\"org.github.ogomezso.springkafka.infrastructure.model.ticket\",\"fields\":[{\"name\":\"taxClass\",\"type\":\"string\"},{\"name\":\"taxType\",\"type\":\"string\"},{\"name\":\"taxRate\",\"type\":\"string\"},{\"name\":\"taxBase\",\"type\":\"string\"},{\"name\":\"taxCharge\",\"type\":\"string\"},{\"name\":\"isTaxIncluded\",\"type\":\"boolean\"},{\"name\":\"vatLetter\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TotalTaxRecord> ENCODER =
      new BinaryMessageEncoder<TotalTaxRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TotalTaxRecord> DECODER =
      new BinaryMessageDecoder<TotalTaxRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TotalTaxRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TotalTaxRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TotalTaxRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TotalTaxRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TotalTaxRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TotalTaxRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TotalTaxRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TotalTaxRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence taxClass;
  private java.lang.CharSequence taxType;
  private java.lang.CharSequence taxRate;
  private java.lang.CharSequence taxBase;
  private java.lang.CharSequence taxCharge;
  private boolean isTaxIncluded;
  private java.lang.CharSequence vatLetter;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TotalTaxRecord() {}

  /**
   * All-args constructor.
   * @param taxClass The new value for taxClass
   * @param taxType The new value for taxType
   * @param taxRate The new value for taxRate
   * @param taxBase The new value for taxBase
   * @param taxCharge The new value for taxCharge
   * @param isTaxIncluded The new value for isTaxIncluded
   * @param vatLetter The new value for vatLetter
   */
  public TotalTaxRecord(java.lang.CharSequence taxClass, java.lang.CharSequence taxType, java.lang.CharSequence taxRate, java.lang.CharSequence taxBase, java.lang.CharSequence taxCharge, java.lang.Boolean isTaxIncluded, java.lang.CharSequence vatLetter) {
    this.taxClass = taxClass;
    this.taxType = taxType;
    this.taxRate = taxRate;
    this.taxBase = taxBase;
    this.taxCharge = taxCharge;
    this.isTaxIncluded = isTaxIncluded;
    this.vatLetter = vatLetter;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return taxClass;
    case 1: return taxType;
    case 2: return taxRate;
    case 3: return taxBase;
    case 4: return taxCharge;
    case 5: return isTaxIncluded;
    case 6: return vatLetter;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: taxClass = (java.lang.CharSequence)value$; break;
    case 1: taxType = (java.lang.CharSequence)value$; break;
    case 2: taxRate = (java.lang.CharSequence)value$; break;
    case 3: taxBase = (java.lang.CharSequence)value$; break;
    case 4: taxCharge = (java.lang.CharSequence)value$; break;
    case 5: isTaxIncluded = (java.lang.Boolean)value$; break;
    case 6: vatLetter = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'taxClass' field.
   * @return The value of the 'taxClass' field.
   */
  public java.lang.CharSequence getTaxClass() {
    return taxClass;
  }


  /**
   * Sets the value of the 'taxClass' field.
   * @param value the value to set.
   */
  public void setTaxClass(java.lang.CharSequence value) {
    this.taxClass = value;
  }

  /**
   * Gets the value of the 'taxType' field.
   * @return The value of the 'taxType' field.
   */
  public java.lang.CharSequence getTaxType() {
    return taxType;
  }


  /**
   * Sets the value of the 'taxType' field.
   * @param value the value to set.
   */
  public void setTaxType(java.lang.CharSequence value) {
    this.taxType = value;
  }

  /**
   * Gets the value of the 'taxRate' field.
   * @return The value of the 'taxRate' field.
   */
  public java.lang.CharSequence getTaxRate() {
    return taxRate;
  }


  /**
   * Sets the value of the 'taxRate' field.
   * @param value the value to set.
   */
  public void setTaxRate(java.lang.CharSequence value) {
    this.taxRate = value;
  }

  /**
   * Gets the value of the 'taxBase' field.
   * @return The value of the 'taxBase' field.
   */
  public java.lang.CharSequence getTaxBase() {
    return taxBase;
  }


  /**
   * Sets the value of the 'taxBase' field.
   * @param value the value to set.
   */
  public void setTaxBase(java.lang.CharSequence value) {
    this.taxBase = value;
  }

  /**
   * Gets the value of the 'taxCharge' field.
   * @return The value of the 'taxCharge' field.
   */
  public java.lang.CharSequence getTaxCharge() {
    return taxCharge;
  }


  /**
   * Sets the value of the 'taxCharge' field.
   * @param value the value to set.
   */
  public void setTaxCharge(java.lang.CharSequence value) {
    this.taxCharge = value;
  }

  /**
   * Gets the value of the 'isTaxIncluded' field.
   * @return The value of the 'isTaxIncluded' field.
   */
  public boolean getIsTaxIncluded() {
    return isTaxIncluded;
  }


  /**
   * Sets the value of the 'isTaxIncluded' field.
   * @param value the value to set.
   */
  public void setIsTaxIncluded(boolean value) {
    this.isTaxIncluded = value;
  }

  /**
   * Gets the value of the 'vatLetter' field.
   * @return The value of the 'vatLetter' field.
   */
  public java.lang.CharSequence getVatLetter() {
    return vatLetter;
  }


  /**
   * Sets the value of the 'vatLetter' field.
   * @param value the value to set.
   */
  public void setVatLetter(java.lang.CharSequence value) {
    this.vatLetter = value;
  }

  /**
   * Creates a new TotalTaxRecord RecordBuilder.
   * @return A new TotalTaxRecord RecordBuilder
   */
  public static org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder newBuilder() {
    return new org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder();
  }

  /**
   * Creates a new TotalTaxRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TotalTaxRecord RecordBuilder
   */
  public static org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder newBuilder(org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder other) {
    if (other == null) {
      return new org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder();
    } else {
      return new org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder(other);
    }
  }

  /**
   * Creates a new TotalTaxRecord RecordBuilder by copying an existing TotalTaxRecord instance.
   * @param other The existing instance to copy.
   * @return A new TotalTaxRecord RecordBuilder
   */
  public static org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder newBuilder(org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord other) {
    if (other == null) {
      return new org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder();
    } else {
      return new org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for TotalTaxRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TotalTaxRecord>
    implements org.apache.avro.data.RecordBuilder<TotalTaxRecord> {

    private java.lang.CharSequence taxClass;
    private java.lang.CharSequence taxType;
    private java.lang.CharSequence taxRate;
    private java.lang.CharSequence taxBase;
    private java.lang.CharSequence taxCharge;
    private boolean isTaxIncluded;
    private java.lang.CharSequence vatLetter;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.taxClass)) {
        this.taxClass = data().deepCopy(fields()[0].schema(), other.taxClass);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.taxType)) {
        this.taxType = data().deepCopy(fields()[1].schema(), other.taxType);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.taxRate)) {
        this.taxRate = data().deepCopy(fields()[2].schema(), other.taxRate);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.taxBase)) {
        this.taxBase = data().deepCopy(fields()[3].schema(), other.taxBase);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.taxCharge)) {
        this.taxCharge = data().deepCopy(fields()[4].schema(), other.taxCharge);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.isTaxIncluded)) {
        this.isTaxIncluded = data().deepCopy(fields()[5].schema(), other.isTaxIncluded);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.vatLetter)) {
        this.vatLetter = data().deepCopy(fields()[6].schema(), other.vatLetter);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing TotalTaxRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.taxClass)) {
        this.taxClass = data().deepCopy(fields()[0].schema(), other.taxClass);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.taxType)) {
        this.taxType = data().deepCopy(fields()[1].schema(), other.taxType);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.taxRate)) {
        this.taxRate = data().deepCopy(fields()[2].schema(), other.taxRate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.taxBase)) {
        this.taxBase = data().deepCopy(fields()[3].schema(), other.taxBase);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.taxCharge)) {
        this.taxCharge = data().deepCopy(fields()[4].schema(), other.taxCharge);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.isTaxIncluded)) {
        this.isTaxIncluded = data().deepCopy(fields()[5].schema(), other.isTaxIncluded);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.vatLetter)) {
        this.vatLetter = data().deepCopy(fields()[6].schema(), other.vatLetter);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'taxClass' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaxClass() {
      return taxClass;
    }


    /**
      * Sets the value of the 'taxClass' field.
      * @param value The value of 'taxClass'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder setTaxClass(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.taxClass = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'taxClass' field has been set.
      * @return True if the 'taxClass' field has been set, false otherwise.
      */
    public boolean hasTaxClass() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'taxClass' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder clearTaxClass() {
      taxClass = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'taxType' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaxType() {
      return taxType;
    }


    /**
      * Sets the value of the 'taxType' field.
      * @param value The value of 'taxType'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder setTaxType(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.taxType = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'taxType' field has been set.
      * @return True if the 'taxType' field has been set, false otherwise.
      */
    public boolean hasTaxType() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'taxType' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder clearTaxType() {
      taxType = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'taxRate' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaxRate() {
      return taxRate;
    }


    /**
      * Sets the value of the 'taxRate' field.
      * @param value The value of 'taxRate'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder setTaxRate(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.taxRate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'taxRate' field has been set.
      * @return True if the 'taxRate' field has been set, false otherwise.
      */
    public boolean hasTaxRate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'taxRate' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder clearTaxRate() {
      taxRate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'taxBase' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaxBase() {
      return taxBase;
    }


    /**
      * Sets the value of the 'taxBase' field.
      * @param value The value of 'taxBase'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder setTaxBase(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.taxBase = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'taxBase' field has been set.
      * @return True if the 'taxBase' field has been set, false otherwise.
      */
    public boolean hasTaxBase() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'taxBase' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder clearTaxBase() {
      taxBase = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'taxCharge' field.
      * @return The value.
      */
    public java.lang.CharSequence getTaxCharge() {
      return taxCharge;
    }


    /**
      * Sets the value of the 'taxCharge' field.
      * @param value The value of 'taxCharge'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder setTaxCharge(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.taxCharge = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'taxCharge' field has been set.
      * @return True if the 'taxCharge' field has been set, false otherwise.
      */
    public boolean hasTaxCharge() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'taxCharge' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder clearTaxCharge() {
      taxCharge = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'isTaxIncluded' field.
      * @return The value.
      */
    public boolean getIsTaxIncluded() {
      return isTaxIncluded;
    }


    /**
      * Sets the value of the 'isTaxIncluded' field.
      * @param value The value of 'isTaxIncluded'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder setIsTaxIncluded(boolean value) {
      validate(fields()[5], value);
      this.isTaxIncluded = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'isTaxIncluded' field has been set.
      * @return True if the 'isTaxIncluded' field has been set, false otherwise.
      */
    public boolean hasIsTaxIncluded() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'isTaxIncluded' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder clearIsTaxIncluded() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'vatLetter' field.
      * @return The value.
      */
    public java.lang.CharSequence getVatLetter() {
      return vatLetter;
    }


    /**
      * Sets the value of the 'vatLetter' field.
      * @param value The value of 'vatLetter'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder setVatLetter(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.vatLetter = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'vatLetter' field has been set.
      * @return True if the 'vatLetter' field has been set, false otherwise.
      */
    public boolean hasVatLetter() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'vatLetter' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.TotalTaxRecord.Builder clearVatLetter() {
      vatLetter = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TotalTaxRecord build() {
      try {
        TotalTaxRecord record = new TotalTaxRecord();
        record.taxClass = fieldSetFlags()[0] ? this.taxClass : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.taxType = fieldSetFlags()[1] ? this.taxType : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.taxRate = fieldSetFlags()[2] ? this.taxRate : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.taxBase = fieldSetFlags()[3] ? this.taxBase : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.taxCharge = fieldSetFlags()[4] ? this.taxCharge : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.isTaxIncluded = fieldSetFlags()[5] ? this.isTaxIncluded : (java.lang.Boolean) defaultValue(fields()[5]);
        record.vatLetter = fieldSetFlags()[6] ? this.vatLetter : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TotalTaxRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<TotalTaxRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TotalTaxRecord>
    READER$ = (org.apache.avro.io.DatumReader<TotalTaxRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.taxClass);

    out.writeString(this.taxType);

    out.writeString(this.taxRate);

    out.writeString(this.taxBase);

    out.writeString(this.taxCharge);

    out.writeBoolean(this.isTaxIncluded);

    out.writeString(this.vatLetter);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.taxClass = in.readString(this.taxClass instanceof Utf8 ? (Utf8)this.taxClass : null);

      this.taxType = in.readString(this.taxType instanceof Utf8 ? (Utf8)this.taxType : null);

      this.taxRate = in.readString(this.taxRate instanceof Utf8 ? (Utf8)this.taxRate : null);

      this.taxBase = in.readString(this.taxBase instanceof Utf8 ? (Utf8)this.taxBase : null);

      this.taxCharge = in.readString(this.taxCharge instanceof Utf8 ? (Utf8)this.taxCharge : null);

      this.isTaxIncluded = in.readBoolean();

      this.vatLetter = in.readString(this.vatLetter instanceof Utf8 ? (Utf8)this.vatLetter : null);

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.taxClass = in.readString(this.taxClass instanceof Utf8 ? (Utf8)this.taxClass : null);
          break;

        case 1:
          this.taxType = in.readString(this.taxType instanceof Utf8 ? (Utf8)this.taxType : null);
          break;

        case 2:
          this.taxRate = in.readString(this.taxRate instanceof Utf8 ? (Utf8)this.taxRate : null);
          break;

        case 3:
          this.taxBase = in.readString(this.taxBase instanceof Utf8 ? (Utf8)this.taxBase : null);
          break;

        case 4:
          this.taxCharge = in.readString(this.taxCharge instanceof Utf8 ? (Utf8)this.taxCharge : null);
          break;

        case 5:
          this.isTaxIncluded = in.readBoolean();
          break;

        case 6:
          this.vatLetter = in.readString(this.vatLetter instanceof Utf8 ? (Utf8)this.vatLetter : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










