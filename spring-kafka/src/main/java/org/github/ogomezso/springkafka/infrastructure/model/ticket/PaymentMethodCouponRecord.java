/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package org.github.ogomezso.springkafka.infrastructure.model.ticket;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PaymentMethodCouponRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8095675794595634615L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PaymentMethodCouponRecord\",\"namespace\":\"org.github.ogomezso.springkafka.infrastructure.model.ticket\",\"fields\":[{\"name\":\"couponPayment\",\"type\":{\"type\":\"record\",\"name\":\"CouponPayment\",\"fields\":[{\"name\":\"paymentMethodId\",\"type\":\"string\"},{\"name\":\"paymentMethodAmount\",\"type\":\"string\"}]}},{\"name\":\"couponBarcode\",\"type\":\"string\"},{\"name\":\"articleGtin\",\"type\":\"string\"},{\"name\":\"forced\",\"type\":\"int\"},{\"name\":\"couponIntroductionMethod\",\"type\":\"string\"},{\"name\":\"couponDescription\",\"type\":\"string\"},{\"name\":\"articleDescription\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PaymentMethodCouponRecord> ENCODER =
      new BinaryMessageEncoder<PaymentMethodCouponRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PaymentMethodCouponRecord> DECODER =
      new BinaryMessageDecoder<PaymentMethodCouponRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PaymentMethodCouponRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PaymentMethodCouponRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PaymentMethodCouponRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PaymentMethodCouponRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PaymentMethodCouponRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PaymentMethodCouponRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PaymentMethodCouponRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PaymentMethodCouponRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment couponPayment;
  private java.lang.CharSequence couponBarcode;
  private java.lang.CharSequence articleGtin;
  private int forced;
  private java.lang.CharSequence couponIntroductionMethod;
  private java.lang.CharSequence couponDescription;
  private java.lang.CharSequence articleDescription;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PaymentMethodCouponRecord() {}

  /**
   * All-args constructor.
   * @param couponPayment The new value for couponPayment
   * @param couponBarcode The new value for couponBarcode
   * @param articleGtin The new value for articleGtin
   * @param forced The new value for forced
   * @param couponIntroductionMethod The new value for couponIntroductionMethod
   * @param couponDescription The new value for couponDescription
   * @param articleDescription The new value for articleDescription
   */
  public PaymentMethodCouponRecord(org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment couponPayment, java.lang.CharSequence couponBarcode, java.lang.CharSequence articleGtin, java.lang.Integer forced, java.lang.CharSequence couponIntroductionMethod, java.lang.CharSequence couponDescription, java.lang.CharSequence articleDescription) {
    this.couponPayment = couponPayment;
    this.couponBarcode = couponBarcode;
    this.articleGtin = articleGtin;
    this.forced = forced;
    this.couponIntroductionMethod = couponIntroductionMethod;
    this.couponDescription = couponDescription;
    this.articleDescription = articleDescription;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return couponPayment;
    case 1: return couponBarcode;
    case 2: return articleGtin;
    case 3: return forced;
    case 4: return couponIntroductionMethod;
    case 5: return couponDescription;
    case 6: return articleDescription;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: couponPayment = (org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment)value$; break;
    case 1: couponBarcode = (java.lang.CharSequence)value$; break;
    case 2: articleGtin = (java.lang.CharSequence)value$; break;
    case 3: forced = (java.lang.Integer)value$; break;
    case 4: couponIntroductionMethod = (java.lang.CharSequence)value$; break;
    case 5: couponDescription = (java.lang.CharSequence)value$; break;
    case 6: articleDescription = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'couponPayment' field.
   * @return The value of the 'couponPayment' field.
   */
  public org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment getCouponPayment() {
    return couponPayment;
  }


  /**
   * Sets the value of the 'couponPayment' field.
   * @param value the value to set.
   */
  public void setCouponPayment(org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment value) {
    this.couponPayment = value;
  }

  /**
   * Gets the value of the 'couponBarcode' field.
   * @return The value of the 'couponBarcode' field.
   */
  public java.lang.CharSequence getCouponBarcode() {
    return couponBarcode;
  }


  /**
   * Sets the value of the 'couponBarcode' field.
   * @param value the value to set.
   */
  public void setCouponBarcode(java.lang.CharSequence value) {
    this.couponBarcode = value;
  }

  /**
   * Gets the value of the 'articleGtin' field.
   * @return The value of the 'articleGtin' field.
   */
  public java.lang.CharSequence getArticleGtin() {
    return articleGtin;
  }


  /**
   * Sets the value of the 'articleGtin' field.
   * @param value the value to set.
   */
  public void setArticleGtin(java.lang.CharSequence value) {
    this.articleGtin = value;
  }

  /**
   * Gets the value of the 'forced' field.
   * @return The value of the 'forced' field.
   */
  public int getForced() {
    return forced;
  }


  /**
   * Sets the value of the 'forced' field.
   * @param value the value to set.
   */
  public void setForced(int value) {
    this.forced = value;
  }

  /**
   * Gets the value of the 'couponIntroductionMethod' field.
   * @return The value of the 'couponIntroductionMethod' field.
   */
  public java.lang.CharSequence getCouponIntroductionMethod() {
    return couponIntroductionMethod;
  }


  /**
   * Sets the value of the 'couponIntroductionMethod' field.
   * @param value the value to set.
   */
  public void setCouponIntroductionMethod(java.lang.CharSequence value) {
    this.couponIntroductionMethod = value;
  }

  /**
   * Gets the value of the 'couponDescription' field.
   * @return The value of the 'couponDescription' field.
   */
  public java.lang.CharSequence getCouponDescription() {
    return couponDescription;
  }


  /**
   * Sets the value of the 'couponDescription' field.
   * @param value the value to set.
   */
  public void setCouponDescription(java.lang.CharSequence value) {
    this.couponDescription = value;
  }

  /**
   * Gets the value of the 'articleDescription' field.
   * @return The value of the 'articleDescription' field.
   */
  public java.lang.CharSequence getArticleDescription() {
    return articleDescription;
  }


  /**
   * Sets the value of the 'articleDescription' field.
   * @param value the value to set.
   */
  public void setArticleDescription(java.lang.CharSequence value) {
    this.articleDescription = value;
  }

  /**
   * Creates a new PaymentMethodCouponRecord RecordBuilder.
   * @return A new PaymentMethodCouponRecord RecordBuilder
   */
  public static org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder newBuilder() {
    return new org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder();
  }

  /**
   * Creates a new PaymentMethodCouponRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PaymentMethodCouponRecord RecordBuilder
   */
  public static org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder newBuilder(org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder other) {
    if (other == null) {
      return new org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder();
    } else {
      return new org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder(other);
    }
  }

  /**
   * Creates a new PaymentMethodCouponRecord RecordBuilder by copying an existing PaymentMethodCouponRecord instance.
   * @param other The existing instance to copy.
   * @return A new PaymentMethodCouponRecord RecordBuilder
   */
  public static org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder newBuilder(org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord other) {
    if (other == null) {
      return new org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder();
    } else {
      return new org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for PaymentMethodCouponRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PaymentMethodCouponRecord>
    implements org.apache.avro.data.RecordBuilder<PaymentMethodCouponRecord> {

    private org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment couponPayment;
    private org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment.Builder couponPaymentBuilder;
    private java.lang.CharSequence couponBarcode;
    private java.lang.CharSequence articleGtin;
    private int forced;
    private java.lang.CharSequence couponIntroductionMethod;
    private java.lang.CharSequence couponDescription;
    private java.lang.CharSequence articleDescription;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.couponPayment)) {
        this.couponPayment = data().deepCopy(fields()[0].schema(), other.couponPayment);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (other.hasCouponPaymentBuilder()) {
        this.couponPaymentBuilder = org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment.newBuilder(other.getCouponPaymentBuilder());
      }
      if (isValidValue(fields()[1], other.couponBarcode)) {
        this.couponBarcode = data().deepCopy(fields()[1].schema(), other.couponBarcode);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.articleGtin)) {
        this.articleGtin = data().deepCopy(fields()[2].schema(), other.articleGtin);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.forced)) {
        this.forced = data().deepCopy(fields()[3].schema(), other.forced);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.couponIntroductionMethod)) {
        this.couponIntroductionMethod = data().deepCopy(fields()[4].schema(), other.couponIntroductionMethod);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.couponDescription)) {
        this.couponDescription = data().deepCopy(fields()[5].schema(), other.couponDescription);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.articleDescription)) {
        this.articleDescription = data().deepCopy(fields()[6].schema(), other.articleDescription);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing PaymentMethodCouponRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.couponPayment)) {
        this.couponPayment = data().deepCopy(fields()[0].schema(), other.couponPayment);
        fieldSetFlags()[0] = true;
      }
      this.couponPaymentBuilder = null;
      if (isValidValue(fields()[1], other.couponBarcode)) {
        this.couponBarcode = data().deepCopy(fields()[1].schema(), other.couponBarcode);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.articleGtin)) {
        this.articleGtin = data().deepCopy(fields()[2].schema(), other.articleGtin);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.forced)) {
        this.forced = data().deepCopy(fields()[3].schema(), other.forced);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.couponIntroductionMethod)) {
        this.couponIntroductionMethod = data().deepCopy(fields()[4].schema(), other.couponIntroductionMethod);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.couponDescription)) {
        this.couponDescription = data().deepCopy(fields()[5].schema(), other.couponDescription);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.articleDescription)) {
        this.articleDescription = data().deepCopy(fields()[6].schema(), other.articleDescription);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'couponPayment' field.
      * @return The value.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment getCouponPayment() {
      return couponPayment;
    }


    /**
      * Sets the value of the 'couponPayment' field.
      * @param value The value of 'couponPayment'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder setCouponPayment(org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment value) {
      validate(fields()[0], value);
      this.couponPaymentBuilder = null;
      this.couponPayment = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'couponPayment' field has been set.
      * @return True if the 'couponPayment' field has been set, false otherwise.
      */
    public boolean hasCouponPayment() {
      return fieldSetFlags()[0];
    }

    /**
     * Gets the Builder instance for the 'couponPayment' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment.Builder getCouponPaymentBuilder() {
      if (couponPaymentBuilder == null) {
        if (hasCouponPayment()) {
          setCouponPaymentBuilder(org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment.newBuilder(couponPayment));
        } else {
          setCouponPaymentBuilder(org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment.newBuilder());
        }
      }
      return couponPaymentBuilder;
    }

    /**
     * Sets the Builder instance for the 'couponPayment' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder setCouponPaymentBuilder(org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment.Builder value) {
      clearCouponPayment();
      couponPaymentBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'couponPayment' field has an active Builder instance
     * @return True if the 'couponPayment' field has an active Builder instance
     */
    public boolean hasCouponPaymentBuilder() {
      return couponPaymentBuilder != null;
    }

    /**
      * Clears the value of the 'couponPayment' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder clearCouponPayment() {
      couponPayment = null;
      couponPaymentBuilder = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'couponBarcode' field.
      * @return The value.
      */
    public java.lang.CharSequence getCouponBarcode() {
      return couponBarcode;
    }


    /**
      * Sets the value of the 'couponBarcode' field.
      * @param value The value of 'couponBarcode'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder setCouponBarcode(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.couponBarcode = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'couponBarcode' field has been set.
      * @return True if the 'couponBarcode' field has been set, false otherwise.
      */
    public boolean hasCouponBarcode() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'couponBarcode' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder clearCouponBarcode() {
      couponBarcode = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'articleGtin' field.
      * @return The value.
      */
    public java.lang.CharSequence getArticleGtin() {
      return articleGtin;
    }


    /**
      * Sets the value of the 'articleGtin' field.
      * @param value The value of 'articleGtin'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder setArticleGtin(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.articleGtin = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'articleGtin' field has been set.
      * @return True if the 'articleGtin' field has been set, false otherwise.
      */
    public boolean hasArticleGtin() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'articleGtin' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder clearArticleGtin() {
      articleGtin = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'forced' field.
      * @return The value.
      */
    public int getForced() {
      return forced;
    }


    /**
      * Sets the value of the 'forced' field.
      * @param value The value of 'forced'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder setForced(int value) {
      validate(fields()[3], value);
      this.forced = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'forced' field has been set.
      * @return True if the 'forced' field has been set, false otherwise.
      */
    public boolean hasForced() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'forced' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder clearForced() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'couponIntroductionMethod' field.
      * @return The value.
      */
    public java.lang.CharSequence getCouponIntroductionMethod() {
      return couponIntroductionMethod;
    }


    /**
      * Sets the value of the 'couponIntroductionMethod' field.
      * @param value The value of 'couponIntroductionMethod'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder setCouponIntroductionMethod(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.couponIntroductionMethod = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'couponIntroductionMethod' field has been set.
      * @return True if the 'couponIntroductionMethod' field has been set, false otherwise.
      */
    public boolean hasCouponIntroductionMethod() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'couponIntroductionMethod' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder clearCouponIntroductionMethod() {
      couponIntroductionMethod = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'couponDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getCouponDescription() {
      return couponDescription;
    }


    /**
      * Sets the value of the 'couponDescription' field.
      * @param value The value of 'couponDescription'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder setCouponDescription(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.couponDescription = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'couponDescription' field has been set.
      * @return True if the 'couponDescription' field has been set, false otherwise.
      */
    public boolean hasCouponDescription() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'couponDescription' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder clearCouponDescription() {
      couponDescription = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'articleDescription' field.
      * @return The value.
      */
    public java.lang.CharSequence getArticleDescription() {
      return articleDescription;
    }


    /**
      * Sets the value of the 'articleDescription' field.
      * @param value The value of 'articleDescription'.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder setArticleDescription(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.articleDescription = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'articleDescription' field has been set.
      * @return True if the 'articleDescription' field has been set, false otherwise.
      */
    public boolean hasArticleDescription() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'articleDescription' field.
      * @return This builder.
      */
    public org.github.ogomezso.springkafka.infrastructure.model.ticket.PaymentMethodCouponRecord.Builder clearArticleDescription() {
      articleDescription = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PaymentMethodCouponRecord build() {
      try {
        PaymentMethodCouponRecord record = new PaymentMethodCouponRecord();
        if (couponPaymentBuilder != null) {
          try {
            record.couponPayment = this.couponPaymentBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("couponPayment"));
            throw e;
          }
        } else {
          record.couponPayment = fieldSetFlags()[0] ? this.couponPayment : (org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment) defaultValue(fields()[0]);
        }
        record.couponBarcode = fieldSetFlags()[1] ? this.couponBarcode : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.articleGtin = fieldSetFlags()[2] ? this.articleGtin : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.forced = fieldSetFlags()[3] ? this.forced : (java.lang.Integer) defaultValue(fields()[3]);
        record.couponIntroductionMethod = fieldSetFlags()[4] ? this.couponIntroductionMethod : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.couponDescription = fieldSetFlags()[5] ? this.couponDescription : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.articleDescription = fieldSetFlags()[6] ? this.articleDescription : (java.lang.CharSequence) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PaymentMethodCouponRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<PaymentMethodCouponRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PaymentMethodCouponRecord>
    READER$ = (org.apache.avro.io.DatumReader<PaymentMethodCouponRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    this.couponPayment.customEncode(out);

    out.writeString(this.couponBarcode);

    out.writeString(this.articleGtin);

    out.writeInt(this.forced);

    out.writeString(this.couponIntroductionMethod);

    out.writeString(this.couponDescription);

    out.writeString(this.articleDescription);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (this.couponPayment == null) {
        this.couponPayment = new org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment();
      }
      this.couponPayment.customDecode(in);

      this.couponBarcode = in.readString(this.couponBarcode instanceof Utf8 ? (Utf8)this.couponBarcode : null);

      this.articleGtin = in.readString(this.articleGtin instanceof Utf8 ? (Utf8)this.articleGtin : null);

      this.forced = in.readInt();

      this.couponIntroductionMethod = in.readString(this.couponIntroductionMethod instanceof Utf8 ? (Utf8)this.couponIntroductionMethod : null);

      this.couponDescription = in.readString(this.couponDescription instanceof Utf8 ? (Utf8)this.couponDescription : null);

      this.articleDescription = in.readString(this.articleDescription instanceof Utf8 ? (Utf8)this.articleDescription : null);

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (this.couponPayment == null) {
            this.couponPayment = new org.github.ogomezso.springkafka.infrastructure.model.ticket.CouponPayment();
          }
          this.couponPayment.customDecode(in);
          break;

        case 1:
          this.couponBarcode = in.readString(this.couponBarcode instanceof Utf8 ? (Utf8)this.couponBarcode : null);
          break;

        case 2:
          this.articleGtin = in.readString(this.articleGtin instanceof Utf8 ? (Utf8)this.articleGtin : null);
          break;

        case 3:
          this.forced = in.readInt();
          break;

        case 4:
          this.couponIntroductionMethod = in.readString(this.couponIntroductionMethod instanceof Utf8 ? (Utf8)this.couponIntroductionMethod : null);
          break;

        case 5:
          this.couponDescription = in.readString(this.couponDescription instanceof Utf8 ? (Utf8)this.couponDescription : null);
          break;

        case 6:
          this.articleDescription = in.readString(this.articleDescription instanceof Utf8 ? (Utf8)this.articleDescription : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










